{"version":3,"sources":["api/CarInsurance.Client.ts","util/delay.ts","api/CurrencyExchange.Client.ts","api/Financing.Client.ts","generic-components/NumericInput.ts","util/isLoadingAny.ts","util/selectors.ts","models/deals/Deal/Deal.ts","models/approval.store.ts","api/CarInventory.Client.ts","util/assert.ts","models/deals/DealForeignCurrency/DealForeignCurrency.ts","models/deals/deals.store.ts","util/numeric.ts","models/clock.store.ts","models/RootModel.ts","models/store.ts","generic-components/NumericInput.component.tsx","generic-components/SelectDropdown.component.tsx","models/deals/Deal/CarModelSelector.component.tsx","generic-components/SelectMultiple.component.tsx","models/deals/Deal/InsurancePlanSelector.component.tsx","util/diffSeconds.ts","models/deals/Deal/Deal.component.tsx","models/deals/DealForeignCurrency/DealForeignCurrency.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InsurancePlanType","delay","ms","Promise","resolve","setTimeout","Currency","carInsuranceClient","console","log","type","base","description","rate","thridParty","assetProtection","rates","EUR","GBP","CHF","currencyExchangeClient","cur","approvedFinacings","getApprovedFinancing","expiration","res","isApproved","approvalToken","Math","random","toString","push","financingClient","carModel","insurancePlans","some","x","basePriceUSD","currency","all","this","getMinimumPossibleDownpayment","getExchangeRate","minDownpayment","downpayment","moment","add","toDate","message","downpaymentInUsd","getApproval","Date","setCurrentUnsavedValue","state","currentUnsavedValue","clearValidity","newState","undefined","isValid","isLoadingAny","dict","Object","entries","createStructuralEqualSelector","createSelectorCreator","defaultMemoize","isEqual","memoizeSelectorCreatorIndeffinitely","selectorCreator","cache","Map","result","key","cached","get","selector","set","DealTag","createBlankDeal","businessParams","dealId","isDealFinalized","insurancePlansSelected","carModelSelected","isClosed","isLoadingItemized","downplaymentInputState","requirments","integer","positive","reuirments","insurancePlansAvailable","carModelsAvailable","messages","getCachedSelectorDealDerrivations","currentApprovalSelector","createSelector","getCurrentApproval","getDealByIdSelector","getDealById","getGeneralValidationSelector","getGeneralValidation","approvals","isLoading","deal","approval","currentDate","approvalExpiresAt","getDealProgressState","clock","isCurrentApprovalLoading","dealProgressState","canBeFinalized","canRequestMinimumDownpayment","finalPrice","getFinalPrice","generalValidation","headerAdditionalDescription","getHeaderAdditionalDescription","canRequestApproval","downpaymentExceedsPrice","multimethod","priceIncrease","map","reduce","prev","validateDealBusinessParams","params","Error","deals","find","currentDealRequest","prepareRequstApprovalCall","request","filter","sort","a","b","timestamp","valueOf","getLatestMatchingApproval","makeCall","createModel","reducers","storeApprovalReqStatus","reqStatus","setIsLoading","effects","dispatch","requestApproval","rootState","call","resp","carInvenotryClient","id","guard","diff","DealForeignCurrencyTag","createBlankDealForeignCurrency","merge","currenciesAvailable","exchangeRate","foreignCuurencyHandlingCoeficient","downpaymentCurrency","isDealForeignCurrency","getDealForeignCurrencyById","validateIsDealForeignCurrency","getCachedSelectorDealForeignCurrencyDerrivations","baseDerrivationsSelector","baseDerrivations","inst","assertNarrowPropType","override","round","getMinimumPossibleDownpaymentInForeignCurrency","getApprovalWithForeignCurrency","defaultState","nextDealId","activeDealId","newDealIsLoading","assign","mergeWithGuard","payload","value","assert","pushNewDeal","setActive","removeDeal","index","findIndex","newActiveDealId","updateDownpaymentInputValue","newValue","tryCommitDownpaymentInputValue","inputState","modelState","additionalValidityCheck","newInputState","newModelState","val","replace","expandMagnitudeShortcuts","trim","num","Number","isNaN","isFinite","isInteger","additionalValitidyCheck","tryCommitValue","setInDeal","setIsLoadingItemized","setInBusinessParams","loadNewDeal","_","newDeal","getAvaliableCarModels","then","getAvaliableInsurancePlans","loadNewDealForeignCurrency","getCurrencies","reloadAvailableCarModels","carModels","reloadAvailableInsurancePlans","setMinimumPossibleDownpayment","minPayment","clearedDownpaymentInput","finalizeDeal","finalizeFinancing","setCurrncyAndReloadExchangeRate","tickIntervalHandle","models","start","clearInterval","ex","setInterval","stop","store","init","plugins","immerPlugin","window","NumericInput","props","inputAttributes","className","placeholder","disabled","onChange","e","target","onBlur","messageAttributes","SelectDropdown","getKeyValue","getDescription","selectAttributes","selectedItem","availableItems","i","hasEmptyOption","onSelect","emptyPlaceholder","keyOrValue","CarModelsSelector","useDispatch","dealState","useSelector","item","onClick","SelectMultiple","multiple","options","values","l","length","selected","selectedItems","v","InsurancePlanSelector","items","diffSeconds","duration","asSeconds","DealCmp","DealCmpBare","inputVal","DealDescription","text","getDealStateDescription","CarPurchaseWithForeignCurrencyCmp","AppRoot","dealsState","activeDealType","dealType","renderDealTab","TabHeader","headerText","deatState","classNames","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c9933603.chunk.js","sourcesContent":["import { delay } from \"../util/delay\";\r\n\r\n\r\nexport enum InsurancePlanType {\r\n    base, thridParty, assetProtection\r\n}\r\n\r\nexport type InsurancePlan = {\r\n    type: InsurancePlanType,\r\n    description: string,\r\n    rate: number\r\n}\r\n\r\nclass CarInsuranceClient {\r\n    public async getAvaliableInsurancePlans(): Promise<InsurancePlan[]> {\r\n        console.log(`server call getAvaliableInsurancePlans`);\r\n        await delay(1500);\r\n        return [{\r\n            type: InsurancePlanType.base,\r\n            description: 'base plan',\r\n            rate: 0.05\r\n        }, {\r\n            type: InsurancePlanType.thridParty,\r\n            description: '3rd-party liability',\r\n            rate: 0.05\r\n        }, {\r\n            type: InsurancePlanType.assetProtection,\r\n            description: 'asset protection',\r\n            rate: 0.3\r\n        }];\r\n    }\r\n}\r\n\r\nexport const carInsuranceClient = new CarInsuranceClient();","export const delay = (ms = 0) => new Promise((resolve) => setTimeout(resolve, ms));","import { delay } from \"../util/delay\";\r\n\r\nexport enum Currency {\r\n    EUR = 'EUR', GBP = 'GBP', CHF = 'CHF'\r\n}\r\n\r\nexport const rates = {\r\n\r\n    [Currency.EUR]: 0.93,\r\n    [Currency.GBP]: 0.83,\r\n    [Currency.CHF]: 0.97\r\n}\r\n\r\nclass CurrencyExchangeClient {\r\n\r\n    public async getCurrencies(): Promise<Currency[]> {\r\n\r\n        console.log(`server call getCurrencies`);\r\n\r\n        await delay(1000);\r\n\r\n        return [\r\n            Currency.EUR,\r\n            Currency.GBP,\r\n            Currency.CHF\r\n        ];\r\n    }\r\n\r\n    // in real life app we would probably have \r\n    // centralsed exchange rate cache on client side,\r\n    // for now don't worry about that\r\n    public async getExchangeRate(cur: Currency): Promise<number> {\r\n\r\n        console.log(`server call getExchangeRate`);\r\n\r\n        await delay(1000);\r\n\r\n        return rates[cur];\r\n    }\r\n}\r\n\r\nexport const currencyExchangeClient = new CurrencyExchangeClient();","import { delay } from \"../util/delay\";\r\nimport { InsurancePlanType } from \"./CarInsurance.Client\";\r\nimport { CarModel } from \"./CarInventory.Client\";\r\nimport moment from 'moment';\r\nimport { Currency, currencyExchangeClient } from \"./CurrencyExchange.Client\";\r\n\r\nexport type FinancingApproved = {\r\n    isApproved: true,\r\n    approvalToken: string,\r\n    expiration?: Date\r\n}\r\n\r\nexport type FinancingNotApproved = {\r\n    isApproved: false,\r\n    message: string\r\n}\r\n\r\nexport type GetApprovalResult = FinancingApproved | FinancingNotApproved;\r\n\r\nconst approvedFinacings: FinancingApproved[] = [];\r\n\r\nfunction getApprovedFinancing(expiration?: Date) {\r\n\r\n    const res = {\r\n        isApproved: true as const,\r\n        expiration: expiration,\r\n        approvalToken: Math.random().toString()\r\n    };\r\n\r\n    approvedFinacings.push(res);\r\n\r\n    return res\r\n}\r\n\r\nclass FinancingClient {\r\n\r\n    public async getMinimumPossibleDownpayment(\r\n        carModel: CarModel,\r\n        insurancePlans: InsurancePlanType[]): Promise<number> {\r\n\r\n        console.log(`server call getMinimumPossibleDownpayment`);\r\n\r\n        await delay(1000);\r\n\r\n        if (insurancePlans.some(x => x === InsurancePlanType.assetProtection)) {\r\n            return carModel.basePriceUSD / 10;\r\n        }\r\n\r\n        return carModel.basePriceUSD / 5;\r\n    }\r\n\r\n    public async getMinimumPossibleDownpaymentInForeignCurrency(\r\n        carModel: CarModel,\r\n        insurancePlans: InsurancePlanType[],\r\n        currency: Currency): Promise<number> {\r\n\r\n        console.log(`server call getMinimumPossibleDownpaymentInForeignCurrency`);\r\n\r\n        const [minDownpayment, rate] = await Promise.all([\r\n            this.getMinimumPossibleDownpayment(carModel, insurancePlans),\r\n            currencyExchangeClient.getExchangeRate(currency)\r\n        ]);\r\n\r\n        return minDownpayment * rate;\r\n    }\r\n\r\n    public async getApproval(\r\n        carModel: CarModel,\r\n        insurancePlans: InsurancePlanType[],\r\n        downpayment: number): Promise<GetApprovalResult> {\r\n\r\n        console.log(`server call getApproval`);\r\n\r\n        await delay(1000);\r\n\r\n        //this would be calculated on the server\r\n\r\n        if (insurancePlans.some(x => x === InsurancePlanType.assetProtection)\r\n            && carModel.basePriceUSD / 10 <= downpayment) {\r\n            return getApprovedFinancing();\r\n        }\r\n\r\n        if (carModel.basePriceUSD / 5 <= downpayment) {\r\n            return getApprovedFinancing(\r\n                moment().add(15 + Math.random() * 30, 's').toDate()\r\n            );\r\n        }\r\n\r\n        return {\r\n            isApproved: false,\r\n            message: \"Approval denied. Downpayment should be over 20% of base price (10% with 'asset protection' insurance).\"\r\n        }\r\n    }\r\n\r\n    public async getApprovalWithForeignCurrency(\r\n        carModel: CarModel,\r\n        insurancePlans: InsurancePlanType[],\r\n        downpayment: number,\r\n        currency: Currency): Promise<GetApprovalResult> {\r\n\r\n        console.log(`server call getApprovalWithForeignCurrency`);\r\n\r\n        const rate = await currencyExchangeClient.getExchangeRate(currency);\r\n        const downpaymentInUsd = (downpayment / rate) + 1;\r\n\r\n        return this.getApproval(carModel, insurancePlans, downpaymentInUsd);\r\n    }\r\n\r\n    public async finalizeFinancing(approvalToken: string) {\r\n\r\n        console.log(`server call finalizeFinancing`);\r\n\r\n        await delay(500);\r\n\r\n        return approvedFinacings.some(x =>\r\n            x.approvalToken === approvalToken\r\n            && (!x.expiration || x.expiration >= new Date())\r\n        )\r\n    };\r\n}\r\n\r\nexport const financingClient = new FinancingClient();","import { expandMagnitudeShortcuts } from \"../util/numeric\";\r\n\r\nexport function getBlankNumericInputState(requirments?:  {\r\n    integer: boolean,\r\n    positive: boolean\r\n}) {\r\n    return {\r\n        currentUnsavedValue: undefined as string | undefined,\r\n        message: undefined as string | undefined,\r\n        isValid: true as boolean | undefined,\r\n        reuirments: requirments ?? {\r\n            integer: false,\r\n            positive: false\r\n        }\r\n    }\r\n}\r\n\r\nexport type NumericInputState = ReturnType<typeof getBlankNumericInputState>;\r\n\r\nexport function setCurrentUnsavedValue(state: NumericInputState, currentUnsavedValue: string | undefined, clearValidity = false){\r\n    const newState = {\r\n        ...state,\r\n        currentUnsavedValue,\r\n    }\r\n\r\n    if(clearValidity) {\r\n        newState.message = undefined;\r\n        newState.isValid = true;\r\n    }\r\n\r\n    return newState;\r\n}\r\n\r\nexport function tryCommitValue(\r\n    inputState: NumericInputState,\r\n    modelState: number | undefined,\r\n    additionalValidityCheck?: (val: number) => string | undefined): {\r\n        newInputState: NumericInputState,\r\n        newModelState: number | undefined\r\n    } {\r\n\r\n    if (!inputState.currentUnsavedValue) {\r\n        return {\r\n            newInputState: { \r\n                ...inputState,\r\n                currentUnsavedValue: undefined,\r\n                isValid: true,\r\n                message: undefined,\r\n            },\r\n            newModelState: modelState\r\n        };\r\n    }\r\n\r\n    let val = inputState.currentUnsavedValue;\r\n\r\n    val = expandMagnitudeShortcuts(val.trim());\r\n\r\n    const num = Number(val);\r\n\r\n    if(Number.isNaN(num) \r\n        || !Number.isFinite(num)) {\r\n        return {\r\n            newInputState: {\r\n                ...inputState,\r\n                isValid: false,\r\n                message: 'Please enter a valid number'\r\n            },\r\n            newModelState: modelState\r\n        };\r\n    }\r\n\r\n\r\n    if (inputState.reuirments.integer \r\n        && !Number.isInteger(num)) {\r\n        return {\r\n            newInputState: {\r\n                ...inputState,\r\n                isValid: false,\r\n                message: 'Please enter a valid integer'\r\n            },\r\n            newModelState: modelState\r\n        };\r\n    }\r\n\r\n    if (inputState.reuirments.positive \r\n        && num < 0) {\r\n        return {\r\n            newInputState: {\r\n                ...inputState,\r\n                isValid: false,\r\n                message: 'Value must be positive'\r\n            },\r\n            newModelState: modelState\r\n        };\r\n    }\r\n\r\n    const additionalValitidyCheck = additionalValidityCheck?.(num);\r\n    if(additionalValitidyCheck) {\r\n        return {\r\n            newInputState: {\r\n                ...inputState,\r\n                isValid: false,\r\n                message: additionalValitidyCheck\r\n            },\r\n            newModelState: modelState\r\n        };\r\n    }\r\n\r\n    return {\r\n        newInputState: { \r\n            ...inputState,\r\n            currentUnsavedValue: undefined,\r\n            isValid: true,\r\n            message: undefined,\r\n        },\r\n        newModelState: num\r\n    };\r\n}","export function isLoadingAny(dict: {[key: string]: boolean}) {\r\n\r\n    for(const [_,v] of Object.entries(dict)){\r\n        if(v === true) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}","import { createSelectorCreator, defaultMemoize } from \"reselect\";\r\nimport isEqual from 'lodash.isequal';\r\n\r\n// create a \"selector creator\" that uses lodash.isequal instead of ===\r\nexport const createStructuralEqualSelector = createSelectorCreator(\r\n    defaultMemoize,\r\n    isEqual\r\n  )\r\n\r\nexport function memoizeSelectorCreatorIndeffinitely<\r\n    TCacheKey, \r\n    TSelector>(selectorCreator: (key: TCacheKey) => TSelector) {\r\n\r\n        //in production app, the cache would probably have a limit of 10-100 items\r\n        const cache = new Map<TCacheKey, TSelector>();\r\n        const result = function getCachedSelectorDealDerrivations(key: TCacheKey){\r\n            const cached = cache.get(key);\r\n            if(cached) {\r\n                return cached;\r\n            }\r\n            const selector = selectorCreator(key);\r\n            cache.set(key, selector);\r\n            return selector;\r\n        }\r\n\r\n        result.cache = cache;\r\n\r\n        return result;\r\n    }","import { createSelector } from \"reselect\";\r\nimport { InsurancePlan } from \"../../../api/CarInsurance.Client\";\r\nimport { CarModel } from \"../../../api/CarInventory.Client\";\r\nimport { financingClient, GetApprovalResult } from \"../../../api/Financing.Client\";\r\nimport { getBlankNumericInputState } from \"../../../generic-components/NumericInput\";\r\nimport { RootState } from \"../../store\";\r\nimport type { ApprovalsState } from \"../../approval.store\";\r\nimport { isLoadingAny } from \"../../../util/isLoadingAny\";\r\nimport { createStructuralEqualSelector, memoizeSelectorCreatorIndeffinitely } from \"../../../util/selectors\";\r\nimport { multimethod } from \"multimethod-type-tag-hierarchy\";\r\nimport isEqual from \"lodash.isequal\";\r\n\r\nexport const DealTag: `Deal${string}` = 'Deal';\r\n\r\nexport const createBlankDeal = () => ({\r\n    type: DealTag,\r\n\r\n    businessParams: {\r\n        dealId: 0,\r\n        isDealFinalized: false,\r\n        downpayment: 0,\r\n        insurancePlansSelected: [] as InsurancePlan[],\r\n        carModelSelected: undefined as CarModel | undefined,\r\n    },\r\n\r\n    isClosed: false,\r\n    isLoadingItemized: {},\r\n    downplaymentInputState: getBlankNumericInputState({ integer: true, positive: true }),\r\n    insurancePlansAvailable: [] as InsurancePlan[],\r\n    carModelsAvailable: [] as CarModel[],\r\n    messages: [] as string[],\r\n});\r\n\r\nexport type Deal = ReturnType<typeof createBlankDeal>\r\n    & {\r\n        isLoadingItemized: { [K in\r\n            //todo generic way to flatten keys or better pattern to select keys that need to be in itemized loading registry\r\n            (keyof ReturnType<typeof createBlankDeal> | keyof ReturnType<typeof createBlankDeal>['businessParams'])]?\r\n            : boolean }\r\n    };\r\n\r\nexport type DealBusinessParams = Deal['businessParams'];\r\n\r\nexport const getCachedSelectorDealDerrivations = memoizeSelectorCreatorIndeffinitely((dealId: number) => {\r\n\r\n    // these 3 selectors facilitate functional approach without unnecessary reacalculations\r\n    const currentApprovalSelector = createSelector(getCurrentApproval, x => x);\r\n    const getDealByIdSelector = createSelector(getDealById, x => x);\r\n    const getGeneralValidationSelector = createSelector(getGeneralValidation, x => x);\r\n\r\n    const selector = createSelector(\r\n        \r\n            (state: RootState) => getDealByIdSelector(state, dealId)!,\r\n\r\n            (state: RootState) => currentApprovalSelector(state, dealId),\r\n\r\n            (state: RootState) => state.approvals.isLoading[dealId],\r\n\r\n            createStructuralEqualSelector((state: RootState) => getDealProgressState(\r\n                getDealByIdSelector(state, dealId)!, \r\n                currentApprovalSelector(state, dealId), \r\n                state.clock.currentDate\r\n                ), x => x),\r\n        \r\n            (state: RootState) => canBeFinalized(            \r\n                getDealByIdSelector(state, dealId)!, \r\n                currentApprovalSelector(state, dealId), \r\n                state.clock.currentDate\r\n                ),\r\n          \r\n            (deal, approval, isCurrentApprovalLoading, dealProgressState, canBeFinalized) => (\r\n                //(console.log(`recalc ${dealId}`,[deal, approval, isCurrentApprovalLoading, dealProgressState, canBeFinalized])), \r\n                {\r\n                deal,\r\n                approval, \r\n                isCurrentApprovalLoading,\r\n                canRequestMinimumDownpayment: canRequestMinimumDownpayment(deal.businessParams),\r\n                finalPrice: getFinalPrice(deal),\r\n                generalValidation: getGeneralValidationSelector(deal),\r\n                dealProgressState,\r\n                headerAdditionalDescription: getHeaderAdditionalDescription(deal),\r\n                canBeFinalized,\r\n                isLoadingAny: isLoadingAny(deal.isLoadingItemized),\r\n                canRequestApproval: deal.businessParams.carModelSelected\r\n                                    && deal.businessParams.isDealFinalized === false\r\n                                    && deal.downplaymentInputState.isValid\r\n                                    && getGeneralValidationSelector(deal).downpaymentExceedsPrice === false\r\n            }));\r\n    \r\n        return selector;\r\n    });\r\n\r\nfunction getDealProgressState(deal: Deal, approval: GetApprovalResult | undefined, currentDate: Date) {\r\n\r\n    if (deal.businessParams.isDealFinalized) {\r\n        return 'deal-finalized' as const;\r\n    }\r\n\r\n    if (!approval || approval.isApproved === false) {\r\n        return 'no-approval' as const;\r\n    }\r\n\r\n    const expiration = approval.expiration;\r\n    if (!expiration) {\r\n        return 'approval-perpetual' as const;\r\n    }\r\n\r\n    if (expiration <= currentDate) {\r\n        return 'approval-expired' as const;\r\n    }\r\n\r\n    return { approvalExpiresAt: expiration } as const;\r\n}\r\n\r\nexport type DealProgressState = ReturnType<typeof getDealProgressState>;\r\n\r\nfunction canRequestMinimumDownpayment(deal: DealBusinessParams) {\r\n    return deal.carModelSelected\r\n        && deal.isDealFinalized === false;\r\n}\r\n\r\nexport const getFinalPrice = multimethod('type', DealTag, (deal: Deal) => {\r\n\r\n    const basePriceUSD = deal.businessParams.carModelSelected?.basePriceUSD;\r\n\r\n    if (!basePriceUSD ) {\r\n        return 0;\r\n    }\r\n\r\n    const priceIncrease = deal\r\n        .businessParams.insurancePlansSelected\r\n        .map(x => basePriceUSD * x.rate)\r\n        .reduce((prev, cur) => prev + cur, 0);\r\n\r\n    // in real world, remember to use specialized lib for financial calculations\r\n    // https://stackoverflow.com/a/588014/882936\r\n    return basePriceUSD + priceIncrease;\r\n});\r\n\r\nfunction getGeneralValidation(deal: Deal) {\r\n\r\n    const downpaymentExceedsPrice = !!(deal.businessParams.carModelSelected\r\n        && deal.businessParams.downpayment > getFinalPrice(deal));\r\n\r\n    const validation = {\r\n        downpaymentExceedsPrice\r\n    }\r\n\r\n    return validation;\r\n}\r\n\r\nexport function validateDealBusinessParams(params: Deal['businessParams'])\r\n    : asserts params is Deal['businessParams'] & { carModelSelected: CarModel } {\r\n\r\n    if (!params.carModelSelected) {\r\n        throw new Error(\"Car model not selected.\");\r\n    }\r\n}\r\n\r\nfunction canBeFinalized(deal: Deal, approval: GetApprovalResult | undefined, currentDate: Date) {\r\n    return deal.businessParams.isDealFinalized === false\r\n        && approval?.isApproved\r\n        && (!approval.expiration || approval.expiration >= currentDate);\r\n}\r\n\r\nfunction getDealById(state: RootState, dealId: number) {\r\n    return state.deals.deals.find(x => x.businessParams.dealId === dealId);\r\n}\r\n\r\nfunction getCurrentApproval(state: RootState, dealId: number) {\r\n\r\n    const deal = getDealById(state, dealId);\r\n\r\n    if (!deal) {\r\n        return undefined;\r\n    }\r\n\r\n    return getLatestMatchingApproval(\r\n        state.approvals,\r\n        deal\r\n    );\r\n}\r\n\r\nfunction getLatestMatchingApproval(\r\n    state: ApprovalsState,\r\n    deal: Deal): GetApprovalResult | undefined {\r\n\r\n    const currentDealRequest = prepareRequstApprovalCall(deal).request;\r\n\r\n    return state.approvals[deal.businessParams.dealId]\r\n        ?.filter(({ request }) => {\r\n            //relies on insurance plans always being in same order;\r\n            //in the real world request should probably also include method name\r\n            return  isEqual(request, currentDealRequest);\r\n        })\r\n        .sort((a, b) => b.timestamp.valueOf() - a.timestamp.valueOf())\r\n    [0]?.result;\r\n}\r\n\r\nexport const getHeaderAdditionalDescription = multimethod('type', DealTag, (deal: Deal) => {\r\n    return '';\r\n});\r\n\r\nexport const getMinimumPossibleDownpayment = multimethod('type', DealTag, (deal: Deal) => {\r\n    return financingClient.getMinimumPossibleDownpayment(\r\n      deal.businessParams.carModelSelected!,\r\n      deal.businessParams.insurancePlansSelected.map(x => x.type)\r\n    );\r\n  });\r\n\r\nexport const prepareRequstApprovalCall = multimethod('type', DealTag, (deal: Deal) => {\r\n\r\n    validateDealBusinessParams(deal.businessParams);\r\n\r\n    const request =  [\r\n        deal.businessParams.carModelSelected!,\r\n        deal.businessParams.insurancePlansSelected.map(x => x.type),\r\n        deal.businessParams.downpayment\r\n    ] as const;\r\n    \r\n    return {\r\n        request: request as any,\r\n        makeCall: () => financingClient.getApproval(...request)\r\n    }\r\n});","import { createModel } from '@rematch/core'\r\nimport type { RootModel } from './RootModel'\r\nimport { financingClient, GetApprovalResult } from '../api/Financing.Client';\r\nimport { Deal, prepareRequstApprovalCall } from './deals/Deal/Deal';\r\n\r\ntype ApprovalRequestStatus = {\r\n    request: any,\r\n    result: GetApprovalResult,\r\n    timestamp: Date\r\n};\r\n\r\nconst defaultState = {\r\n    approvals: {} as {\r\n        [dealId: number]: ApprovalRequestStatus[]\r\n    },\r\n    isLoading: {} as {\r\n        [dealId: number]: boolean\r\n    }\r\n};\r\n\r\nexport type ApprovalsState = typeof defaultState;\r\n\r\nexport const approvals = createModel<RootModel>()({\r\n    state: defaultState,\r\n    reducers: {\r\n        storeApprovalReqStatus(state: ApprovalsState, dealId: number, reqStatus: ApprovalRequestStatus) {\r\n            if (!state.approvals[dealId]) {\r\n                state.approvals[dealId] = [];\r\n            }\r\n\r\n            state.approvals[dealId].push(reqStatus);\r\n            return state;\r\n        },\r\n        setIsLoading(state: ApprovalsState, dealId: number, isLoading: boolean) {\r\n            state.isLoading[dealId] = isLoading;\r\n            return state;\r\n        },\r\n    },\r\n    effects: (dispatch) => ({\r\n        async requestApproval(deal: Deal, rootState) {\r\n            dispatch.approvals.setIsLoading(deal.businessParams.dealId, true);\r\n\r\n            const call = prepareRequstApprovalCall(deal);\r\n            const resp = await call.makeCall();\r\n\r\n            dispatch.approvals.storeApprovalReqStatus(deal.businessParams.dealId, {\r\n                request: call.request,\r\n                result: resp,\r\n                timestamp: new Date()\r\n            });\r\n\r\n            dispatch.approvals.setIsLoading(deal.businessParams.dealId, false);\r\n        },\r\n    }),\r\n});","import { delay } from \"../util/delay\";\r\n\r\nexport type CarModel = {\r\n    id: number,\r\n    description: string,\r\n    basePriceUSD: number\r\n}\r\n\r\nclass CarInventoryClient {\r\n\r\n    public async getAvaliableCarModels(): Promise<CarModel[]> {\r\n        console.log(`server call getAvaliableCarModels`);\r\n        await delay(500);\r\n        return [\r\n            {\r\n                id: 1,\r\n                description: 'Hetman Speedster',\r\n                basePriceUSD: 100000\r\n            },\r\n            {\r\n                id: 2,\r\n                description: 'Hetman Workhorse',\r\n                basePriceUSD: 26000\r\n            },\r\n            {\r\n                id: 3,\r\n                description: 'Hetman Luxury',\r\n                basePriceUSD: 90000\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n\r\nexport const carInvenotryClient = new CarInventoryClient();","import { NarrowPropTypeByKey, PartialDeep } from \"ts-typing-util\";\r\n\r\nexport function assert(value: unknown): asserts value {\r\n    if (!value) {\r\n        throw new Error(\"Assertion failed\");\r\n    }\r\n}\r\n\r\n//todo move to ts-typing-util\r\nexport function assertNarrowPropType<\r\n    T,\r\n    TKey extends keyof T,\r\n    TNarrowedPropType extends T[TKey]>\r\n    (inst: T, key: TKey, guard: (wide: T[TKey]) => wide is TNarrowedPropType): asserts inst is NarrowPropTypeByKey<T, TKey, TNarrowedPropType> {\r\n\r\n    const val = inst[key];\r\n\r\n    if (guard(val) === false) {\r\n        throw new Error(\"Assertion failed\");\r\n    }\r\n}\r\n\r\nexport type DiffWithGuard<TDerived> = {\r\n    guard: (val:any) => val is TDerived,\r\n    diff: PartialDeep<TDerived> \r\n};\r\n\r\nexport function guard<TDerived>(\r\n    guard: (val: any) => val is TDerived,\r\n    diff: PartialDeep<TDerived>): DiffWithGuard<TDerived>{\r\n\r\n        return {\r\n            guard,\r\n            diff\r\n        }\r\n}","import { createBlankDeal, Deal, getCachedSelectorDealDerrivations, getFinalPrice, getHeaderAdditionalDescription, getMinimumPossibleDownpayment, prepareRequstApprovalCall, validateDealBusinessParams } from \"../Deal/Deal\";\r\nimport merge from 'lodash.merge';\r\nimport { Currency } from \"../../../api/CurrencyExchange.Client\";\r\nimport type { RootState } from \"../../store\";\r\nimport { memoizeSelectorCreatorIndeffinitely } from \"../../../util/selectors\";\r\nimport { createSelector } from \"reselect\";\r\nimport { assertNarrowPropType } from \"../../../util/assert\";\r\nimport { financingClient } from \"../../../api/Financing.Client\";\r\n\r\nexport const DealForeignCurrencyTag: `Deal;DealForeignCurrency${string}` = 'Deal;DealForeignCurrency';\r\n\r\nexport const createBlankDealForeignCurrency = () => {\r\n\r\n    const base = createBlankDeal();\r\n\r\n    return merge(base, {\r\n        type: DealForeignCurrencyTag,\r\n        currenciesAvailable: [] as Currency[],\r\n        exchangeRate: 1,\r\n        businessParams: {\r\n            foreignCuurencyHandlingCoeficient: 1.02,\r\n            downpaymentCurrency: Currency.EUR\r\n        }\r\n    })\r\n};\r\n\r\nexport type DealForeignCurrency = ReturnType<typeof createBlankDealForeignCurrency>\r\n    & {\r\n        isLoadingItemized: { [K in\r\n            //todo generic way to flatten keys or better pattern to select keys that need to be in itemized loading registry\r\n            (keyof ReturnType<typeof createBlankDealForeignCurrency> | keyof ReturnType<typeof createBlankDealForeignCurrency>['businessParams'])]?\r\n            : boolean }\r\n    };\r\n\r\nexport type DealForeignCurrencyBusinessParams = DealForeignCurrency['businessParams'];\r\n\r\nexport const isDealForeignCurrency = (deal: Deal): deal is DealForeignCurrency => deal.type === DealForeignCurrencyTag;\r\n\r\nexport function validateIsDealForeignCurrency(deal: Deal): asserts deal is DealForeignCurrency {\r\n    if (isDealForeignCurrency(deal) === false) {\r\n        throw new Error(`Deal with is ${deal.businessParams.dealId} was found, but has type: ${deal.type} instead of expected ${DealForeignCurrencyTag}`);\r\n    }\r\n}\r\n\r\nexport function getDealForeignCurrencyById(state: RootState, dealId: number) {\r\n    const deal = state.deals.deals.find(x => x.businessParams.dealId === dealId)!;\r\n    validateIsDealForeignCurrency(deal);\r\n    return deal;\r\n}\r\n\r\nexport const getCachedSelectorDealForeignCurrencyDerrivations = memoizeSelectorCreatorIndeffinitely((dealId: number) => {\r\n\r\n    const baseDerrivationsSelector = getCachedSelectorDealDerrivations(dealId);\r\n\r\n    const selector = createSelector(\r\n\r\n        (state: RootState) => {\r\n            const baseDerrivations = baseDerrivationsSelector(state);\r\n            //typing change turned our to be the only difference\r\n            assertNarrowPropType(baseDerrivations, 'deal', isDealForeignCurrency);\r\n            return baseDerrivations;\r\n        },\r\n\r\n        (base) => (\r\n            //(console.log(`recalc ${dealId}`,[base])), \r\n            {\r\n                ...base,\r\n            }));\r\n\r\n    return selector;\r\n});\r\n\r\ngetHeaderAdditionalDescription.override(DealForeignCurrencyTag, (deal: DealForeignCurrency) => {\r\n    return `${deal.businessParams.downpaymentCurrency} `;\r\n});\r\n\r\ngetFinalPrice.override(DealForeignCurrencyTag, function (deal: DealForeignCurrency) {\r\n    const basePriceUSD = this.base(deal);\r\n    const finalPrice = basePriceUSD\r\n        * deal.businessParams.foreignCuurencyHandlingCoeficient\r\n        * deal.exchangeRate;\r\n\r\n    return Math.round(finalPrice);\r\n});\r\n\r\ngetMinimumPossibleDownpayment.override(DealForeignCurrencyTag, (deal: DealForeignCurrency) => {\r\n    return financingClient.getMinimumPossibleDownpaymentInForeignCurrency(\r\n        deal.businessParams.carModelSelected!,\r\n        deal.businessParams.insurancePlansSelected.map(x => x.type),\r\n        deal.businessParams.downpaymentCurrency\r\n    );\r\n});\r\n\r\nprepareRequstApprovalCall.override(DealForeignCurrencyTag, (deal: DealForeignCurrency) => {\r\n\r\n    validateDealBusinessParams(deal.businessParams);\r\n\r\n    const request = [\r\n        deal.businessParams.carModelSelected!,\r\n        deal.businessParams.insurancePlansSelected.map(x => x.type),\r\n        deal.businessParams.downpayment,\r\n        deal.businessParams.downpaymentCurrency\r\n    ] as const;\r\n\r\n    return {\r\n        request: request as any,\r\n        makeCall: () => financingClient.getApprovalWithForeignCurrency(...request)\r\n    }\r\n});","import { createModel } from '@rematch/core'\r\nimport { Deal, validateDealBusinessParams, getCachedSelectorDealDerrivations, createBlankDeal, DealTag, getMinimumPossibleDownpayment } from './Deal/Deal';\r\nimport type { RootModel } from '../RootModel'\r\nimport { setCurrentUnsavedValue, tryCommitValue } from '../../generic-components/NumericInput';\r\nimport { carInvenotryClient } from '../../api/CarInventory.Client';\r\nimport { carInsuranceClient } from '../../api/CarInsurance.Client';\r\nimport { financingClient } from '../../api/Financing.Client';\r\nimport { createBlankDealForeignCurrency, DealForeignCurrency, DealForeignCurrencyTag, getDealForeignCurrencyById, isDealForeignCurrency } from './DealForeignCurrency/DealForeignCurrency';\r\nimport { Currency, currencyExchangeClient } from '../../api/CurrencyExchange.Client';\r\nimport { assert, DiffWithGuard, guard } from '../../util/assert';\r\nimport { merge } from 'lodash';\r\n\r\n//this is needed to be able to type generic `set` reducer\r\nconst defaultState = {\r\n  nextDealId: 1,\r\n  deals: [] as Deal[],\r\n  activeDealId: undefined as number | undefined,\r\n  newDealIsLoading: false\r\n};\r\n\r\nexport type DealsState = typeof defaultState;\r\n\r\nexport const deals = createModel<RootModel>()({\r\n  state: defaultState,\r\n  reducers: {\r\n\r\n    // warning! all versions of set/merge are only for cases\r\n    // where tehre is no business logic involved, just straightfoward\r\n    // setting of properties. Any kind of conditional set/merge\r\n    // should have a specialized reducer.\r\n    set(state: DealsState, diff: Partial<DealsState>) {\r\n      Object.assign(state, diff);\r\n      return state;\r\n    },\r\n\r\n    //much more generazlied form of set\r\n    mergeWithGuard(state, dealId: number, payload: DiffWithGuard<Deal>) {\r\n      const deal = state.deals.find(x => x.businessParams.dealId === dealId)!;\r\n      assert(payload.guard(deal));\r\n      merge(deal,payload.diff);\r\n      return state;\r\n    },\r\n\r\n    pushNewDeal(state, deal: Deal, setActive = true) {\r\n      state.deals.push(deal);\r\n      if (setActive) {\r\n        state.activeDealId = deal.businessParams.dealId;\r\n      }\r\n\r\n      deal.businessParams.carModelSelected = deal.carModelsAvailable[0];\r\n\r\n      return state;\r\n    },\r\n\r\n    removeDeal(state, dealId: number) {\r\n\r\n      if (dealId === state.activeDealId) {\r\n        const index = state.deals.findIndex(x => x.businessParams.dealId === dealId);\r\n        const newActiveDealId = state.deals[index - 1]?.businessParams.dealId\r\n          ?? state.deals[index + 1]?.businessParams.dealId;\r\n        console.log(newActiveDealId);\r\n        state.activeDealId = newActiveDealId;\r\n      }\r\n\r\n      state.deals = state.deals.filter(x => x.businessParams.dealId !== dealId);\r\n\r\n      return state;\r\n    },\r\n\r\n    updateDownpaymentInputValue(state, dealId: number, newValue: string) {\r\n      const deal = state.deals.find(x => x.businessParams.dealId === dealId)!;\r\n      deal.downplaymentInputState = setCurrentUnsavedValue(deal.downplaymentInputState, newValue);\r\n      return state;\r\n    },\r\n\r\n    tryCommitDownpaymentInputValue(state, dealId: number) {\r\n      const deal = state.deals.find(x => x.businessParams.dealId === dealId)!;\r\n      let res = tryCommitValue(deal.downplaymentInputState, deal.businessParams.downpayment);\r\n      deal.downplaymentInputState = res.newInputState;\r\n      deal.businessParams.downpayment = res.newModelState ?? 0;\r\n      return state;\r\n    },\r\n\r\n    setInDeal(state, dealId: number, diff: Partial<Deal>) {\r\n      const deal = state.deals.find(x => x.businessParams.dealId === dealId)!;\r\n      Object.assign(deal, diff);\r\n      return state;\r\n    },\r\n\r\n    setIsLoadingItemized(state, dealId: number, diff: Partial<Deal['isLoadingItemized']>) {\r\n      const deal = state.deals.find(x => x.businessParams.dealId === dealId)!;\r\n      Object.assign(deal.isLoadingItemized, diff);\r\n      return state;\r\n    },\r\n\r\n    setInBusinessParams(state, dealId: number, diff: Partial<Deal['businessParams']>) {\r\n      const deal = state.deals.find(x => x.businessParams.dealId === dealId)!;\r\n      Object.assign(deal.businessParams, diff);\r\n      return state;\r\n    },\r\n  },\r\n  effects: (dispatch) => ({\r\n\r\n    async loadNewDeal(_, rootState) {\r\n      dispatch.deals.set({ newDealIsLoading: true });\r\n\r\n      const newDeal = createBlankDeal();\r\n\r\n      newDeal.businessParams.dealId = rootState.deals.nextDealId;\r\n\r\n      dispatch.deals.set({nextDealId: rootState.deals.nextDealId + 1});\r\n  \r\n      await Promise.all([\r\n          carInvenotryClient.getAvaliableCarModels().then(x => newDeal.carModelsAvailable = x),\r\n          carInsuranceClient.getAvaliableInsurancePlans().then(x => newDeal.insurancePlansAvailable = x)\r\n      ]);\r\n\r\n      dispatch.deals.pushNewDeal(newDeal);\r\n\r\n      dispatch.deals.set({ newDealIsLoading: false });\r\n    },\r\n\r\n    async loadNewDealForeignCurrency(_, rootState) {\r\n      dispatch.deals.set({ newDealIsLoading: true });\r\n\r\n      const newDeal = createBlankDealForeignCurrency();\r\n\r\n      newDeal.businessParams.dealId = rootState.deals.nextDealId;\r\n\r\n      dispatch.deals.set({nextDealId: rootState.deals.nextDealId + 1});\r\n  \r\n      await Promise.all([\r\n          carInvenotryClient.getAvaliableCarModels().then(x => newDeal.carModelsAvailable = x),\r\n          carInsuranceClient.getAvaliableInsurancePlans().then(x => newDeal.insurancePlansAvailable = x),\r\n          currencyExchangeClient.getCurrencies().then(x => newDeal.currenciesAvailable = x),\r\n          currencyExchangeClient.getExchangeRate(newDeal.businessParams.downpaymentCurrency).then(x => newDeal.exchangeRate = x)\r\n      ]);\r\n\r\n      dispatch.deals.pushNewDeal(newDeal);\r\n\r\n      dispatch.deals.set({ newDealIsLoading: false });\r\n    },\r\n\r\n    async reloadAvailableCarModels(dealId: number, rootState) {\r\n      dispatch.deals.setIsLoadingItemized(dealId, { carModelsAvailable: true });\r\n\r\n      const carModels = await carInvenotryClient.getAvaliableCarModels();\r\n\r\n      dispatch.deals.setInDeal(dealId, { carModelsAvailable: carModels });\r\n\r\n      dispatch.deals.setIsLoadingItemized(dealId, { carModelsAvailable: false });\r\n    },\r\n\r\n    async reloadAvailableInsurancePlans(dealId: number, rootState) {\r\n      dispatch.deals.setIsLoadingItemized(dealId, { insurancePlansAvailable: true });\r\n\r\n      const insurancePlans = await carInsuranceClient.getAvaliableInsurancePlans();\r\n\r\n      dispatch.deals.setInDeal(dealId, { insurancePlansAvailable: insurancePlans });\r\n\r\n      dispatch.deals.setIsLoadingItemized(dealId, { insurancePlansAvailable: false });\r\n    },\r\n\r\n    async setMinimumPossibleDownpayment(dealId: number, rootState) {\r\n      dispatch.deals.setIsLoadingItemized(dealId, { downpayment: true });\r\n\r\n      const deal = rootState.deals.deals.find(x => x.businessParams.dealId === dealId)!;\r\n\r\n      validateDealBusinessParams(deal.businessParams);\r\n\r\n      const minPayment = await getMinimumPossibleDownpayment(deal);\r\n\r\n      dispatch.deals.setInBusinessParams(dealId, { downpayment: minPayment });\r\n\r\n      const clearedDownpaymentInput = setCurrentUnsavedValue(deal.downplaymentInputState, undefined, true);\r\n      dispatch.deals.setInDeal(dealId, {downplaymentInputState: clearedDownpaymentInput})\r\n\r\n      dispatch.deals.setIsLoadingItemized(dealId, { downpayment: false });\r\n    },\r\n\r\n    async requestApproval(dealId: number, rootState) {\r\n\r\n      const deal = rootState.deals.deals.find(x => x.businessParams.dealId === dealId)!;\r\n\r\n      validateDealBusinessParams(deal.businessParams);\r\n\r\n      await dispatch.approvals.requestApproval(deal);\r\n    },\r\n\r\n    async finalizeDeal(dealId: number, rootState) {\r\n\r\n      const approval = getCachedSelectorDealDerrivations(dealId)(rootState).approval;\r\n\r\n      if (approval?.isApproved !== true) {\r\n        throw new Error(\"Attempt to finalize deal without approval.\");\r\n      }\r\n\r\n      dispatch.deals.setIsLoadingItemized(dealId, { isDealFinalized: true });\r\n\r\n      const res = await financingClient.finalizeFinancing(approval.approvalToken);\r\n\r\n      dispatch.deals.setInBusinessParams(dealId, { isDealFinalized: res });\r\n\r\n      dispatch.deals.setIsLoadingItemized(dealId, { isDealFinalized: false });\r\n    },\r\n\r\n    async setCurrncyAndReloadExchangeRate([dealId, currency]: [dealId: number, curreny: Currency], rootState) {\r\n      \r\n      //for deal type validation\r\n      getDealForeignCurrencyById(rootState, dealId);\r\n     \r\n      dispatch.deals.mergeWithGuard(dealId, guard(isDealForeignCurrency, {\r\n        businessParams: {\r\n          downpaymentCurrency: currency\r\n        }, \r\n        isLoadingItemized: {\r\n          exchangeRate: true\r\n        }\r\n      }));\r\n\r\n      const exchangeRate = await currencyExchangeClient.getExchangeRate(currency);\r\n\r\n      dispatch.deals.mergeWithGuard(dealId, guard(isDealForeignCurrency, {\r\n        exchangeRate: exchangeRate, \r\n        isLoadingItemized: {\r\n          exchangeRate: false\r\n        }\r\n      }));\r\n    }\r\n\r\n  })\r\n});","\r\n\r\n\r\nexport function expandMagnitudeShortcuts(val: string) {\r\n    return val\r\n            .replace('k', '000')\r\n            .replace('K', '000')\r\n            .replace('m', '000000')\r\n            .replace('M', '000000');\r\n}\r\n\r\nexport function isInteger(val: string) {\r\n    return /^-?\\d+$/.test(val);\r\n}","import { createModel } from '@rematch/core'\r\nimport type { RootModel } from './RootModel'\r\n\r\nconst defaultState = {\r\n    currentDate: new Date(),\r\n    tickIntervalHandle: undefined as (number | undefined)\r\n};\r\n\r\ntype ClockState = typeof defaultState;\r\n\r\nexport const clock = createModel<RootModel>()({\r\n\tstate: defaultState,\r\n    reducers: {\r\n        set(state: ClockState, diff: Partial<ClockState>) {\r\n            Object.assign(state, diff);\r\n            return state;\r\n          },\r\n    },\r\n\teffects: (dispatch) => ({\r\n\t\tstart (_, rootState) {\r\n\t\t\tif (rootState.clock.tickIntervalHandle !== undefined) {\r\n                try {\r\n                    clearInterval(rootState.clock.tickIntervalHandle);\r\n                } catch(ex) {\r\n\r\n                }\r\n            }\r\n\r\n             // in real project setInterval would be behind a mockable abstraction\r\n            const tickIntervalHandle = setInterval(() => {\r\n                dispatch.clock.set({ currentDate: new Date()});\r\n            }, 1000) as unknown as number;\r\n            \r\n            dispatch.clock.set({tickIntervalHandle: tickIntervalHandle});\r\n            dispatch.clock.set({ currentDate: new Date()});\r\n\t\t},\r\n        stop (_, rootState) {\r\n\t        if (rootState.clock.tickIntervalHandle === undefined) {\r\n                return 'already stopped';\r\n            }\r\n\r\n            clearInterval(rootState.clock.tickIntervalHandle);\r\n            dispatch.clock.set({tickIntervalHandle: undefined});\r\n\r\n            return 'clock stopped';\r\n        }\r\n\t}),\r\n})\r\n","import { Models } from '@rematch/core'\r\nimport { approvals } from './approval.store'\r\nimport { deals } from './deals/deals.store'\r\nimport { clock } from './clock.store';\r\n\r\nexport interface RootModel extends Models<RootModel> {\r\n\tclock: typeof clock,\r\n\tdeals: typeof deals,\r\n\tapprovals: typeof approvals\r\n}\r\n\r\nexport const models: RootModel = { clock, deals, approvals }","import { init, RematchDispatch, RematchRootState } from '@rematch/core'\r\nimport immerPlugin from '@rematch/immer'\r\n//import selectPlugin from '@rematch/select'\r\nimport { models, RootModel } from './RootModel'\r\n\r\nexport const store = init<RootModel, RootModel>({\r\n\tmodels,\r\n\tplugins: [\r\n\t\timmerPlugin(),\r\n\t\t//selectPlugin(),\r\n\t],\r\n});\r\n\r\nstore.dispatch.clock.start();\r\n\r\n(window as any).store = store;\r\n\r\nexport type Store = typeof store\r\nexport type Dispatch = RematchDispatch<RootModel>\r\nexport type RootState = RematchRootState<RootModel, RootModel>\r\n","import React from \"react\";\r\nimport { NumericInputState } from \"./NumericInput\";\r\n\r\ntype NumericInputProps =\r\n    {\r\n        inputAttributes?: React.HTMLAttributes<HTMLElement>,\r\n        messageAttributes?: React.HTMLAttributes<HTMLElement>,\r\n        placeholder?: string | undefined,\r\n        disabled?: boolean,\r\n        modelState: number | undefined,\r\n        inputState: NumericInputState,\r\n        onChange: (newVal: string) => void,\r\n        onBlur: () => void\r\n    };\r\n\r\nexport const NumericInput = (props: NumericInputProps) => {\r\n\r\n        return <>\r\n            <input\r\n                {...(props.inputAttributes ?? {})}\r\n                className={(props.inputAttributes?.className ?? '') + (props.inputState.isValid ? '' : ' invalid')}\r\n                value={props.inputState.currentUnsavedValue ?? props.modelState?.toString() ?? ''}\r\n                placeholder={props.placeholder}\r\n                disabled={props.disabled}\r\n                onChange={(e) => props.onChange(e.target.value)}\r\n                onBlur={(e) => props.onBlur()}\r\n            />\r\n\r\n            {\r\n                props.inputState.message &&\r\n                <div\r\n                    {...(props.messageAttributes ?? {})}>\r\n                    {props.inputState.message}\r\n                </div>\r\n            }\r\n        </>\r\n    };","import React from \"react\";\r\n\r\ntype SelectDropdownProps<T> =\r\n    {\r\n        selectAttributes?: React.HTMLAttributes<HTMLElement>,    \r\n        getKeyValue?: (item: T) => string,\r\n        getDescription?: (item: T) => string,\r\n        disabled?: boolean,\r\n        availableItems: T[],\r\n    }\r\n    & ({\r\n        hasEmptyOption: false,\r\n        modelState: T,\r\n        onSelect: (item: T) => void\r\n    } | {\r\n        hasEmptyOption: true,\r\n        emptyPlaceholder: string,\r\n        modelState: T | undefined,\r\n        onSelect: (item: T | undefined) => void\r\n    });\r\n\r\n\r\nexport const SelectDropdown = <T extends unknown>(props: SelectDropdownProps<T>) => {\r\n\r\n    props = {\r\n        ...props,\r\n        getKeyValue: props.getKeyValue ?? ((x: any) => x.toString()),\r\n        getDescription: props.getDescription ?? ((x: any) => x.toString())\r\n    }\r\n\r\n    return <select\r\n        {...props.selectAttributes ?? {}}\r\n        disabled={props.disabled}\r\n        value={props.modelState\r\n            ? props.getKeyValue?.(props.modelState) //for some reason rops.getKeyValue!.(....) does not work with React compiler\r\n            : ''}\r\n        onChange={handleSelect}\r\n    >\r\n        {\r\n            props.hasEmptyOption &&\r\n            <option value={''}>\r\n                {props.emptyPlaceholder}\r\n            </option>\r\n        }\r\n\r\n        {\r\n            props.availableItems.map(x => {\r\n\r\n                const keyOrValue = props.getKeyValue!(x);\r\n                const description = props.getDescription!(x);\r\n\r\n                return <option\r\n                    key={keyOrValue}\r\n                    value={keyOrValue}\r\n                >\r\n                    {description}\r\n                </option>\r\n            })\r\n        }\r\n    </select>;\r\n\r\n    function handleSelect(e: React.ChangeEvent<HTMLSelectElement>) {\r\n        const value = e.target.value\r\n\r\n        const selectedItem = props.availableItems\r\n            .find(i => value === props.getKeyValue!(i));\r\n\r\n        // sattisfy compiler\r\n        if (props.hasEmptyOption === true) {\r\n            props.onSelect(selectedItem);\r\n        } else {\r\n            if (selectedItem === undefined) {\r\n                throw new Error();\r\n            }\r\n            props.onSelect(selectedItem);\r\n        }\r\n\r\n\r\n    }\r\n};","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SelectDropdown } from \"../../../generic-components/SelectDropdown.component\";\r\nimport type { Dispatch, RootState } from \"../../store\";\r\nimport { getCachedSelectorDealDerrivations } from \"./Deal\";\r\n\r\nexport const CarModelsSelector = (props: {\r\n    dealId: number\r\n}) => {\r\n\r\n    const dispatch = useDispatch<Dispatch>();\r\n    \r\n    const dealState = useSelector((state: RootState) => getCachedSelectorDealDerrivations(props.dealId)(state));\r\n\r\n    return <>\r\n        {\r\n            dealState.deal.isLoadingItemized.carModelsAvailable\r\n                ? <div className='car-model-selector-select'>Loading</div>\r\n                : <SelectDropdown\r\n                    selectAttributes={{ className: 'car-model-selector-select' }}\r\n                    emptyPlaceholder='Please select model'\r\n\r\n                    hasEmptyOption={true}\r\n                    availableItems={dealState.deal.carModelsAvailable}\r\n                    modelState={dealState.deal.businessParams.carModelSelected}\r\n                    getKeyValue={(item) => item.id.toString()}\r\n                    getDescription={(item) => item.description}\r\n                    disabled={dealState.isLoadingAny\r\n                                || dealState.deal.businessParams.isDealFinalized}\r\n                    onSelect={(item) => dispatch.deals.setInBusinessParams(\r\n                        props.dealId,\r\n                        {\r\n                            carModelSelected: item\r\n                        })}\r\n                />\r\n        }\r\n\r\n        <button\r\n            className='car-model-selector-refresh-btn'\r\n            onClick={() => dispatch.deals.reloadAvailableCarModels(dealState.deal.businessParams.dealId)}\r\n            disabled={dealState.isLoadingAny || dealState.deal.businessParams.isDealFinalized}\r\n        >\r\n            Refresh available models\r\n        </button>\r\n    </>\r\n};","import React from \"react\";\r\n\r\ntype SelectMultipleProps<T> =\r\n{\r\n    selectAttributes?: React.HTMLAttributes<HTMLElement>,    \r\n    getKeyValue?: (item: T) => string,\r\n    getDescription?: (item: T) => string,\r\n    disabled: boolean,\r\n    availableItems: T[],\r\n    modelState: T[],\r\n    onSelect: (items: T[]) => void\r\n};\r\n\r\nexport const SelectMultiple = <T extends unknown>(props: SelectMultipleProps<T>) => {\r\n\r\n    props = {\r\n        ...props,\r\n        getKeyValue: props.getKeyValue ?? ((x: any) => x.toString()),\r\n        getDescription: props.getDescription ?? ((x: any) => x.toString())\r\n    }\r\n\r\n        return <select\r\n            {...props.selectAttributes ?? {}}\r\n            multiple={true}\r\n            disabled={props.disabled}\r\n            value={props.modelState.map(x => props.getKeyValue!(x))}\r\n            onChange={handleSelect}\r\n        >\r\n            {\r\n                props.availableItems.map(x => {\r\n\r\n                    const keyOrValue = props.getKeyValue!(x);\r\n                    const description = props.getDescription!(x);\r\n\r\n                    return <option\r\n                        key={keyOrValue}\r\n                        value={keyOrValue}\r\n                    >\r\n                        {description}\r\n                    </option>\r\n                })\r\n            }\r\n        </select>;\r\n\r\n        function handleSelect(e: React.ChangeEvent<HTMLSelectElement>) {\r\n            const options = e.target.options;\r\n            const values: string[] = [];\r\n            for (var i = 0, l = options.length; i < l; i++) {\r\n                if (options[i].selected) {\r\n                    values.push(options[i].value);\r\n                }\r\n            }\r\n\r\n            const selectedItems = props.availableItems\r\n                .filter(i => values.some(v => v === props.getKeyValue!(i)));\r\n\r\n            props.onSelect(selectedItems);\r\n        }\r\n    }","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SelectMultiple } from \"../../../generic-components/SelectMultiple.component\";\r\nimport type { Dispatch, RootState } from \"../../store\";\r\nimport { getCachedSelectorDealDerrivations } from \"./Deal\";\r\n\r\nexport const InsurancePlanSelector = (props:{\r\n    dealId: number\r\n}) => {\r\n\r\n    const dispatch = useDispatch<Dispatch>();\r\n\r\n    const dealState = useSelector((state: RootState) => getCachedSelectorDealDerrivations(props.dealId)(state));\r\n\r\n    return <>\r\n        {dealState.deal.isLoadingItemized.insurancePlansAvailable\r\n            ? <div className='insurance-plan-selector-select'>Loading</div>\r\n            : <SelectMultiple\r\n                selectAttributes={{ className: 'insurance-plan-selector-select' }}\r\n                availableItems={dealState.deal.insurancePlansAvailable}\r\n                modelState={dealState.deal.businessParams.insurancePlansSelected}\r\n                disabled={dealState.isLoadingAny}\r\n                getKeyValue={(item) => item.type.toString()}\r\n                getDescription={(item) => item.description}\r\n                onSelect={(items) => dispatch.deals.setInBusinessParams(props.dealId,\r\n                    { insurancePlansSelected: items })}\r\n            />\r\n        }\r\n        <button\r\n            className='insurance-plan-selector-refresh-btn'\r\n            onClick={() => dispatch.deals.reloadAvailableInsurancePlans(props.dealId)}\r\n            disabled={dealState.isLoadingAny || dealState.deal.businessParams.isDealFinalized}\r\n        >\r\n            Refresh available plans\r\n        </button>\r\n    </>\r\n}","import moment from \"moment\";\r\n\r\nexport function diffSeconds(expiration: Date, currentDate: Date){\r\n    var duration = moment.duration(moment(expiration).diff(currentDate));\r\n    var seconds = Math.round(duration.asSeconds());\r\n    return seconds;\r\n}","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NumericInput } from \"../../../generic-components/NumericInput.component\";\r\nimport type { Dispatch, RootState } from \"../../store\";\r\nimport { CarModelsSelector } from \"./CarModelSelector.component\";\r\nimport { DealProgressState, getCachedSelectorDealDerrivations } from \"./Deal\";\r\nimport './Deal.component.css';\r\nimport { InsurancePlanSelector } from \"./InsurancePlanSelector.component\";\r\nimport { diffSeconds } from \"../../../util/diffSeconds\";\r\n\r\nexport const DealCmp = (props: {\r\n    dealId: number\r\n}) => (<div className='car-purchase-deal'>\r\n    <DealCmpBare {...props} />\r\n</div>);\r\n\r\nexport const DealCmpBare = (props: {\r\n    dealId: number\r\n}) => {\r\n\r\n    const dealState = useSelector((state: RootState) => getCachedSelectorDealDerrivations(props.dealId)(state));\r\n\r\n    const messages = [\r\n        ...dealState.deal.messages,\r\n        ...(dealState.generalValidation.downpaymentExceedsPrice ? [`Downpayment can't exceed total price.`] : []),\r\n        ...(dealState.approval?.isApproved === false ? [dealState.approval.message] : [])\r\n    ];\r\n\r\n    const dispatch = useDispatch<Dispatch>();\r\n\r\n    return <>\r\n        <div className='car-purchase-model-selector-label'>\r\n            Please select model\r\n    </div>\r\n        <CarModelsSelector dealId={props.dealId} />\r\n        <div className='car-purchase-insurance-selector-label'>\r\n            Please select insurance options\r\n    </div>\r\n        <InsurancePlanSelector dealId={props.dealId} />\r\n        <div className='car-purchase-downpayment-label'>\r\n            Please select downpayment\r\n    </div>\r\n        <NumericInput\r\n            inputAttributes={{ className: 'car-purchase-downpayment' }}\r\n            messageAttributes={{ className: 'car-purchase-downpayment-messages' }}\r\n            modelState={dealState.deal.businessParams.downpayment}\r\n            inputState={dealState.deal.downplaymentInputState}\r\n            disabled={dealState.deal.isLoadingItemized.downpayment\r\n                || dealState.deal.businessParams.isDealFinalized}\r\n            onChange={(inputVal) => dispatch.deals.updateDownpaymentInputValue(props.dealId, inputVal)}\r\n            onBlur={() => dispatch.deals.tryCommitDownpaymentInputValue(props.dealId)}\r\n        />\r\n        <button\r\n            className='button-set-minimum-possible-downpayment'\r\n            disabled={dealState.isLoadingAny\r\n                || !dealState.canRequestMinimumDownpayment}\r\n            onClick={() => dispatch.deals.setMinimumPossibleDownpayment(props.dealId)}\r\n        >\r\n            Set minimum possible\r\n        </button>\r\n        <div className='car-purchase-final-price-label'>\r\n            Final price\r\n    </div>\r\n        <div className='car-final-price'>\r\n            {dealState.finalPrice}\r\n        </div>\r\n        {\r\n            dealState.dealProgressState !== 'no-approval' &&\r\n            <DealDescription dealId={props.dealId}/>\r\n        }\r\n        <button\r\n            className='button-request-approval'\r\n            disabled={dealState.isLoadingAny\r\n                || dealState.isCurrentApprovalLoading\r\n                || !dealState.canRequestApproval}\r\n            onClick={() => dispatch.deals.requestApproval(props.dealId)}\r\n        >\r\n            Request approval\r\n        </button>\r\n        <button\r\n            className='button-close-active-deal'\r\n            onClick={() => dispatch.deals.removeDeal(props.dealId)}\r\n        >\r\n            Close this deal\r\n    </button>\r\n        <button\r\n            className='button-finalzie-deal'\r\n            disabled={dealState.deal.isLoadingItemized.isDealFinalized\r\n                        || !dealState.canBeFinalized}\r\n            onClick={() => dispatch.deals.finalizeDeal(props.dealId)}\r\n        >\r\n            Finalize deal\r\n    </button>\r\n        {  \r\n            (messages.length > 0) &&\r\n            <div className='car-purchase-messages'>\r\n                {messages.map(x => (<div key={x}>{x}</div>))}\r\n            </div>\r\n        }\r\n    </>;\r\n};\r\n\r\nfunction DealDescription(props: {dealId: number}){\r\n\r\n    const text =  useSelector((state: RootState) => getDealStateDescription(\r\n        getCachedSelectorDealDerrivations(props.dealId)(state).dealProgressState,\r\n        state.clock.currentDate\r\n    ));\r\n\r\n    return <div className='car-purchase-deal-state'>\r\n        {text}\r\n    </div>;\r\n\r\n    function getDealStateDescription(state: DealProgressState, currentDate: Date) {\r\n        if (state === 'deal-finalized') {\r\n            return 'Congratulations! Deal is finalized.';\r\n        }\r\n        if (state === 'no-approval') {\r\n            return '';\r\n        }\r\n        if (state === 'approval-perpetual') {\r\n            return 'Approval granted.';\r\n        }\r\n        if (state === 'approval-expired') {\r\n            return 'Approval expired.';\r\n        }\r\n        return `Approval granted. Expires in ${diffSeconds(state.approvalExpiresAt, currentDate)} seconds.`;\r\n    }\r\n}","\r\nimport React from \"react\";\r\nimport { getCachedSelectorDealForeignCurrencyDerrivations, isDealForeignCurrency } from \"./DealForeignCurrency\";\r\nimport './DealForeignCurrency.component.css';\r\nimport { DealCmpBare } from \"../Deal/Deal.component\";\r\nimport { SelectDropdown } from \"../../../generic-components/SelectDropdown.component\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport type { Dispatch, RootState } from \"../../store\";\r\n\r\nexport const CarPurchaseWithForeignCurrencyCmp = (props: { dealId: number }) => {\r\n\r\n    const dealState = useSelector((state: RootState) => getCachedSelectorDealForeignCurrencyDerrivations(props.dealId)(state));\r\n\r\n    const dispatch = useDispatch<Dispatch>();\r\n\r\n    return <div className='car-purchase-deal car-purchase-deal-with-foreign-currency'>\r\n        <DealCmpBare dealId={props.dealId} />\r\n\r\n        <div className='car-purchase-downpayment-currency-label'>\r\n            Please select currency\r\n    </div>\r\n\r\n        <SelectDropdown\r\n            selectAttributes={{ className: 'car-purchase-downpayment-currency' }}\r\n            hasEmptyOption={false}\r\n            availableItems={dealState.deal.currenciesAvailable}\r\n            modelState={dealState.deal.businessParams.downpaymentCurrency}\r\n            disabled={dealState.isLoadingAny || dealState.deal.businessParams.isDealFinalized}\r\n            onSelect={(currency) => dispatch.deals.setCurrncyAndReloadExchangeRate([props.dealId, currency])}\r\n        />\r\n\r\n    </div>;\r\n};\r\n\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Provider } from 'react-redux';\r\nimport { RootState, Dispatch, store } from './models/store'\r\nimport './App.css';\r\nimport classNames from 'classnames';\r\nimport { DealTag, getCachedSelectorDealDerrivations } from './models/deals/Deal/Deal';\r\nimport { DealCmp } from './models/deals/Deal/Deal.component';\r\nimport { diffSeconds } from './util/diffSeconds';\r\nimport { CarPurchaseWithForeignCurrencyCmp } from './models/deals/DealForeignCurrency/DealForeignCurrency.component';\r\nimport { DealForeignCurrencyTag } from './models/deals/DealForeignCurrency/DealForeignCurrency';\r\n\r\nconst AppRoot = () => {\r\n\r\n  const dealsState = useSelector((state: RootState) => state.deals);\r\n  const activeDealType = useSelector((state: RootState) => state.deals.deals.find(x => x.businessParams.dealId === state.deals.activeDealId)?.type);\r\n  const dispatch = useDispatch<Dispatch>();\r\n\r\n  return <div id='app-root'>\r\n\r\n    <div className='main-logo'>\r\n      Hetman Motors (Rematch 2 advanced)\r\n    </div>\r\n\r\n    <div className='screens'>\r\n      <div className='tabs'>\r\n        <button\r\n          className='button-add-new-deal'\r\n          disabled={dealsState.newDealIsLoading}\r\n          onClick={dispatch.deals.loadNewDeal}\r\n        >\r\n          Add deal\r\n        </button>\r\n\r\n        <button\r\n          className=\"button-add-new-deal\"\r\n          disabled={dealsState.newDealIsLoading}\r\n          onClick={dispatch.deals.loadNewDealForeignCurrency}\r\n        >\r\n          Add foreign currency deal\r\n        </button>\r\n\r\n        { dealsState.deals.filter(x => !x.isClosed).map(x => (<TabHeader \r\n              key={x.businessParams.dealId} \r\n              dealId={x.businessParams.dealId}\r\n            />))}\r\n      </div>\r\n\r\n      <div className={`active-tab`}>\r\n        {\r\n          renderDealTab(dealsState.activeDealId, activeDealType)\r\n        }\r\n      </div>\r\n    </div>\r\n  </div>;\r\n\r\n  function renderDealTab(dealId: number | undefined, dealType: typeof DealTag | undefined) {\r\n\r\n    if(typeof dealId === 'undefined') {\r\n      return <></>;\r\n    }\r\n\r\n    if(dealType === DealForeignCurrencyTag) {\r\n      return <CarPurchaseWithForeignCurrencyCmp dealId={dealId} />;\r\n    }\r\n\r\n    //default - most basic deal\r\n    return <DealCmp dealId={dealId} />;\r\n  }\r\n\r\n};\r\n\r\nconst TabHeader = (props: {dealId: number}) => {\r\n\r\n  const headerText = useSelector((state: RootState) => {\r\n      const deatState = getCachedSelectorDealDerrivations(props.dealId)(state);\r\n\r\n      if (!deatState.deal.businessParams.carModelSelected) {\r\n        return `blank deal`\r\n      }\r\n  \r\n      let text: string = '';\r\n      if (deatState.dealProgressState === 'deal-finalized') {\r\n        text = 'done';\r\n      } else if (deatState.dealProgressState === 'approval-perpetual') {\r\n        text = 'approved'\r\n      } else if (typeof deatState.dealProgressState !== 'string') {\r\n        text = `${diffSeconds(deatState.dealProgressState.approvalExpiresAt, state.clock.currentDate)} sec`;\r\n      }\r\n  \r\n      return `${deatState.deal.businessParams.carModelSelected.description} ${deatState.headerAdditionalDescription}${text}`;\r\n  });\r\n\r\n  const dispatch = useDispatch<Dispatch>();\r\n\r\n  return <div\r\n    className={classNames({\r\n      'deal-tab-header': true,\r\n      'active': props.dealId === useSelector((state: RootState) => state.deals.activeDealId)\r\n    })}\r\n    key={props.dealId}\r\n  >\r\n    <div\r\n      className='header-text'\r\n      onClick={() => dispatch.deals.set({ activeDealId: props.dealId})}\r\n    >\r\n      {headerText}\r\n    </div>\r\n\r\n    <button\r\n      className='close-button'\r\n      onClick={() => dispatch.deals.removeDeal(props.dealId)}\r\n    >\r\n      X\r\n    </button>\r\n  </div>;\r\n}\r\n\r\nexport const App = () => (\r\n  <Provider store={store}>\r\n    <AppRoot />\r\n  </Provider>\r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}