{"version":3,"sources":["generic-components/select-dropdown/SelectDropdown.tsx","screens/car-purchase/components/car-model-selector/CarModelsSelector.tsx","generic-components/select-multiple/SelectMultiple.tsx","screens/car-purchase/components/insurance-plan-selector/InsurancePlanSelector.tsx","generic-components/numeric-input/NumericInput.tsx","screens/car-purchase/components/CarPurchase.tsx","util/delay.ts","util/util.ts","api/CarInsurance.Client.ts","api/CurrencyExchange.Client.ts","api/Financing.Client.ts","util/observable-ticker.ts","screens/car-purchase/model/CarPurchase.Model.ts","api/CarInventory.Client.ts","screens/car-purchase/components/car-model-selector/CarModelsSelector.VM.ts","screens/car-purchase/components/insurance-plan-selector/InsurancePlansSelector.VM.ts","generic-components/numeric-input/NumericInputVM.ts","screens/car-purchase/components/CarPurchase.VM.ts","screens/car-purchase/model/CarPurchaseWithForeignCurrency.Model.ts","generic-components/currency-selector/CurrencySelector.VM.ts","screens/car-purchase/components/CarPurchaseWithForeignCurrency.VM.ts","App.VM.ts","generic-components/currency-selector/CurrencySelector.tsx","screens/car-purchase/components/CarPurchaseWithForeignCurrency.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SelectDropdown","observer","props","vm","selectAttributes","disabled","value","selectedItem","getKeyValue","onChange","e","target","availableItems","find","i","hasEmptyOption","handleSelect","undefined","Error","emptyPlaceholder","map","x","keyOrValue","description","getDescription","key","CarModelsSelector","isLoading","className","availableModels","selectedModel","isDealFinilized","item","id","toString","setSelectedModel","onClick","reloadAvailableModels","SelectMultiple","multiple","selectedItems","options","values","l","length","selected","push","filter","some","v","InsurancePlanSelector","availablePlans","selectedPlans","type","items","setSelectedPlans","reloadAvailablePlans","NumericInput","inputAttributes","isValid","displayedValue","placeholder","onBlur","message","messageAttributes","CarPurchase","CarPurchaseBare","carModelSelectorVM","insurancePlanSelectorVM","downpaymentInputVm","canSetMinimumPossibleDownpayment","setMinimumPossibleDownpayment","finalPrice","console","log","Date","dealState","state","approvalExpiresInSeconds","getDealStateDescription","canRequestApproval","getApproval","close","canFinalizeDeal","finalzieDeal","messages","delay","ms","Promise","resolve","setTimeout","InsurancePlanType","Lazy","initialize","_instance","_initialize","this","Currency","CarInsuranceClient","base","rate","thridParty","assetProtection","carInsuranceClient","rates","USD","EUR","GBP","CHF","CurrencyExchangeClient","cur","currencyExchangeClient","approvedFinacings","getApprovedFinancing","expiration","res","isApproved","approvalToken","Math","random","FinancingClient","carModel","insurancePlans","basePriceUSD","currency","all","getMinimumPossibleDownpayment","val","getExchangeRate","minDownpayment","downpayment","moment","add","toDate","downpaymentInUsd","financingClient","ticker1second","observable","lastTickDate","setInterval","action","CarPurchaseModel","carModelId","arr1","arr2","unionSize","Set","size","setsMatch","insurancePlansSelected","response","fincingApprovalsCache","timestamp","approvalResponse","_messages","financingApprovalResponseForCurrentDeal","finalizeFinancing","isDealFinalized","approval","getProp","currentStateMatchesApprovalItem","sort","a","b","dateA","valueOf","hasValidFinancingApproval","computed","CarInventoryClient","carInvenotryClient","CarModelsSelectorVM","bound","carPurchaseModel","getAvaliableCarModels","InsurancePlansSelectorVM","getAvaliableInsurancePlans","newSelectedPlans","selectedPlanTypes","y","PositiveIntegerVM","getModelValue","setValidValueToModel","isDisabled","additionalValidity","reaction","clearUnsavedState","currentUnsavedValue","_message","_isValid","trim","replace","test","int","parseInt","CarPurchaseVM","onClose","cssClassName","createModel","createDownpaymentVM","basePrice","priceIncrease","reduce","prev","finalizeDeal","_isLoading","getMinimumPossibleDownpaymentFromServer","minimumDownpayment","runInAction","headerAdditionalDescription","calculateFinalPriceFromBase","duration","diff","seconds","round","asSeconds","CarPurchaseWithForeignCurrencyModel","downpaymentCurrency","getApprovalWithForeignCurrency","availableCurrencies","getCurrencies","CurrencySelectorVM","setValueToModel","then","currencies","CarPurchaseWithForeignCurrencyVM","currencySelector","newCurrency","foreignCuurencyHandlingCoeficient","_currency","reloadExchangeRate","fireImmediately","exchangeRate","convertedBasePrice","price","getMinimumPossibleDownpaymentInForeignCurrency","appVm","coutner","addNewDeal","closeDeal","capPurchaseVMs","activeCapPurchaseVM","deal","dealVm","index","findIndex","splice","CurrencySelector","selectedCurrency","CarPurchaseWithForeignCurrency","App","addForeignCurrencyDeal","setActiveDeal","tabHeader","renderActiveDeal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d074c8d5.chunk.js","sourcesContent":["import { observer } from \"mobx-react\";\r\nimport React from \"react\";\r\n\r\ntype SelectDropdownProps<T> =\r\n    {\r\n        selectAttributes?: React.HTMLAttributes<HTMLElement>,\r\n        emptyPlaceholder: string,\r\n        vm: {\r\n            availableItems: T[],\r\n\r\n            getKeyValue: (item: T) => string,\r\n            getDescription: (item: T) => string,\r\n\r\n            disabled?: boolean\r\n        } & ({\r\n            hasEmptyOption: false,\r\n            selectedItem: T,\r\n            handleSelect: (item: T) => void,\r\n        } | {\r\n            hasEmptyOption: true,\r\n            selectedItem: T | undefined,\r\n            handleSelect: (item: T | undefined) => void,\r\n        })\r\n    };\r\n\r\n\r\nexport const SelectDropdown =\r\n    observer(<T extends unknown>(props: SelectDropdownProps<T>) => {\r\n\r\n        const vm = props.vm;\r\n\r\n        return <select\r\n            {...props.selectAttributes ?? {}}\r\n            disabled={vm.disabled}\r\n            value={vm.selectedItem\r\n                ? vm.getKeyValue(vm.selectedItem)\r\n                : ''}\r\n            onChange={handleSelect}\r\n        >\r\n            {\r\n                vm.hasEmptyOption &&\r\n                <option value={''}>\r\n                    {props.emptyPlaceholder}\r\n                </option>\r\n            }\r\n\r\n            {\r\n                vm.availableItems.map(x => {\r\n\r\n                    const keyOrValue = vm.getKeyValue(x);\r\n                    const description = vm.getDescription(x);\r\n\r\n                    return <option\r\n                        key={keyOrValue}\r\n                        value={keyOrValue}\r\n                    >\r\n                        {description}\r\n                    </option>\r\n                })\r\n            }\r\n        </select>;\r\n\r\n        function handleSelect(e: React.ChangeEvent<HTMLSelectElement>) {\r\n            const value = e.target.value\r\n\r\n            const selectedItem = vm.availableItems\r\n                .find(i => value === vm.getKeyValue(i));\r\n\r\n            // sattisfy compiler\r\n            if (vm.hasEmptyOption === true) {\r\n                vm.handleSelect(selectedItem);\r\n            } else {\r\n                if (selectedItem === undefined) {\r\n                    throw new Error();\r\n                }\r\n                vm.handleSelect(selectedItem);\r\n            }\r\n\r\n\r\n        }\r\n    });","import { observer } from \"mobx-react\";\r\nimport { CarModelsSelectorVM } from \"./CarModelsSelector.VM\";\r\nimport React from \"react\";\r\nimport { SelectDropdown } from \"../../../../generic-components/select-dropdown/SelectDropdown\";\r\n\r\nexport const CarModelsSelector: React.FunctionComponent<{\r\n    vm: CarModelsSelectorVM\r\n}> = observer(({ vm }) => {\r\n\r\n    if (vm.isLoading) {\r\n        return <div className='car-model-selector-loading'>Loading</div>\r\n    }\r\n    return <>\r\n        <SelectDropdown\r\n            selectAttributes={{ className: 'car-model-selector-select' }}\r\n            emptyPlaceholder='Please select model'\r\n            vm={{\r\n                availableItems: vm.availableModels,\r\n                selectedItem: vm.selectedModel,\r\n                hasEmptyOption: true,\r\n                disabled: vm.isDealFinilized,\r\n                getKeyValue: (item) => item.id.toString(),\r\n                getDescription: (item) => item.description,\r\n                handleSelect: (item) => vm.setSelectedModel(item),\r\n            }}\r\n\r\n        />\r\n        <button\r\n            className='car-model-selector-refresh-btn'\r\n            onClick={vm.reloadAvailableModels}\r\n            disabled={vm.isDealFinilized}\r\n        >\r\n            Refresh available models\r\n        </button>\r\n    </>\r\n});","import { observer } from \"mobx-react\";\r\nimport React from \"react\";\r\n\r\ntype SelectMultipleProps<T> =\r\n    {\r\n        selectAttributes?: React.HTMLAttributes<HTMLElement>,\r\n        vm: {\r\n            availableItems: T[],\r\n            selectedItems: T[],\r\n\r\n            getKeyValue: (item: T) => string,\r\n            getDescription: (item: T) => string,\r\n\r\n            handleSelect: (items: T[]) => void,\r\n            disabled?: boolean\r\n        }\r\n    };\r\n\r\nexport const SelectMultiple =\r\n    observer(<T extends unknown>(props: SelectMultipleProps<T>) => {\r\n\r\n        const vm = props.vm;\r\n\r\n        return <select\r\n            {...props.selectAttributes ?? {}}\r\n            multiple={true}\r\n            disabled={vm.disabled}\r\n            value={vm.selectedItems.map(x => vm.getKeyValue(x))}\r\n            onChange={handleSelect}\r\n        >\r\n            {\r\n                vm.availableItems.map(x => {\r\n\r\n                    const keyOrValue = vm.getKeyValue(x);\r\n                    const description = vm.getDescription(x);\r\n\r\n                    return <option\r\n                        key={keyOrValue}\r\n                        value={keyOrValue}\r\n                    >\r\n                        {description}\r\n                    </option>\r\n                })\r\n            }\r\n        </select>;\r\n\r\n        function handleSelect(e: React.ChangeEvent<HTMLSelectElement>) {\r\n            const options = e.target.options;\r\n            const values: string[] = [];\r\n            for (var i = 0, l = options.length; i < l; i++) {\r\n                if (options[i].selected) {\r\n                    values.push(options[i].value);\r\n                }\r\n            }\r\n\r\n            const selectedItems = vm.availableItems\r\n                .filter(i => values.some(v => v === vm.getKeyValue(i)));\r\n\r\n            vm.handleSelect(selectedItems);\r\n        }\r\n    });","import { observer } from \"mobx-react\";\r\nimport React from \"react\";\r\nimport { InsurancePlansSelectorVM } from \"./InsurancePlansSelector.VM\";\r\nimport { SelectMultiple } from \"../../../../generic-components/select-multiple/SelectMultiple\";\r\n\r\nexport const InsurancePlanSelector: React.FunctionComponent<{\r\n    vm: InsurancePlansSelectorVM\r\n}> = observer(({ vm }) => {\r\n\r\n    if (vm.isLoading) {\r\n        return <div className='insurance-plan-selector-loading'>Loading</div>\r\n    }\r\n\r\n    return <>\r\n        <SelectMultiple\r\n            selectAttributes={{ className: 'insurance-plan-selector-select' }}\r\n            vm={{\r\n                availableItems: vm.availablePlans,\r\n                selectedItems: vm.selectedPlans,\r\n                disabled: vm.isDealFinilized,\r\n                getKeyValue: (item) => item.type.toString(),\r\n                getDescription: (item) => item.description,\r\n                handleSelect: (items) => vm.setSelectedPlans(items),\r\n            }}\r\n\r\n        />\r\n        <button\r\n            className='insurance-plan-selector-refresh-btn'\r\n            onClick={vm.reloadAvailablePlans}\r\n            disabled={vm.isDealFinilized}\r\n        >\r\n            Refresh available plans\r\n        </button>\r\n    </>\r\n});","import { observer } from \"mobx-react\";\r\nimport React from \"react\";\r\nimport { NumericInputVM } from \"./NumericInputVM\";\r\n\r\ntype NumericInputProps =\r\n    {\r\n        inputAttributes?: React.HTMLAttributes<HTMLElement>,\r\n        messageAttributes?: React.HTMLAttributes<HTMLElement>,\r\n        placeholder?: string | undefined,\r\n        vm: NumericInputVM\r\n    };\r\n\r\nexport const NumericInput =\r\n    observer((props: NumericInputProps) => {\r\n\r\n        const vm = props.vm;\r\n\r\n        return <>\r\n            <input\r\n                {...props.inputAttributes ?? {}}\r\n                className={(props.inputAttributes?.className ?? '') + (vm.isValid ? '' : ' invalid')}\r\n                value={vm.displayedValue}\r\n                placeholder={props.placeholder}\r\n                disabled={vm.disabled}\r\n                onChange={(e) => vm.onChange(e.target.value)}\r\n                onBlur={(e) => vm.onBlur(e.target.value)}\r\n            />\r\n\r\n            {\r\n                vm.message &&\r\n                <div\r\n                    {...props.messageAttributes ?? {}}>\r\n                    {vm.message}\r\n                </div>\r\n            }\r\n        </>\r\n    });","import { observer, Observer } from \"mobx-react\";\r\nimport React from \"react\";\r\nimport { CarPurchaseVM } from \"./CarPurchase.VM\";\r\nimport { CarModelsSelector } from \"./car-model-selector/CarModelsSelector\";\r\nimport { InsurancePlanSelector } from \"./insurance-plan-selector/InsurancePlanSelector\";\r\nimport { NumericInput } from \"../../../generic-components/numeric-input/NumericInput\";\r\nimport './CarPurchase.css';\r\n\r\nexport const CarPurchase: React.FunctionComponent<{\r\n    vm: CarPurchaseVM\r\n}> = observer(({ vm }) => (<div className='car-purchase-deal'>\r\n    <CarPurchaseBare vm={vm} />\r\n</div>));\r\n\r\nexport const CarPurchaseBare: React.FunctionComponent<{\r\n    vm: CarPurchaseVM\r\n}> = observer(({ vm }) => {\r\n\r\n    return <>\r\n        <div className='car-purchase-model-selector-label'>\r\n            Please select model\r\n    </div>\r\n        <CarModelsSelector vm={vm.carModelSelectorVM} />\r\n        <div className='car-purchase-insurance-selector-label'>\r\n            Please select insurance options\r\n    </div>\r\n        <InsurancePlanSelector vm={vm.insurancePlanSelectorVM} />\r\n        <div className='car-purchase-downpayment-label'>\r\n            Please select downpayment\r\n    </div>\r\n        <NumericInput\r\n            inputAttributes={{ className: 'car-purchase-downpayment' }}\r\n            messageAttributes={{ className: 'car-purchase-downpayment-messages' }}\r\n            vm={vm.downpaymentInputVm}\r\n        />\r\n        <button\r\n            className='button-set-minimum-possible-downpayment'\r\n            disabled={!vm.canSetMinimumPossibleDownpayment}\r\n            onClick={vm.setMinimumPossibleDownpayment}\r\n        >\r\n            Set minimum possible\r\n    </button>\r\n        <div className='car-purchase-final-price-label'>\r\n            Final price\r\n    </div>\r\n        <div className='car-final-price'>\r\n            {vm.finalPrice}\r\n        </div>\r\n        <Observer>\r\n            {() => {\r\n                console.log('Rendering deal state', new Date());\r\n                return <>\r\n                    {\r\n                        vm.dealState !== 'no-approval' &&\r\n                        <div className='car-purchase-deal-state'>\r\n                            {getDealStateDescription(vm.dealState)}\r\n                        </div>\r\n                    }\r\n                </>\r\n            }}\r\n        </Observer>\r\n        <button\r\n            className='button-request-approval'\r\n            disabled={!vm.canRequestApproval}\r\n            onClick={vm.getApproval}\r\n        >\r\n            Request approval\r\n    </button>\r\n        <button\r\n            className='button-close-active-deal'\r\n            onClick={vm.close}\r\n        >\r\n            Close this deal\r\n    </button>\r\n        <button\r\n            className='button-finalzie-deal'\r\n            disabled={!vm.canFinalizeDeal}\r\n            onClick={vm.finalzieDeal}\r\n        >\r\n            Finalize deal\r\n    </button>\r\n        {\r\n            vm.messages.length > 0 &&\r\n            <div className='car-purchase-messages'>\r\n                {vm.messages.map(x => (<div key={x}>{x}</div>))}\r\n            </div>\r\n        }\r\n    </>;\r\n\r\n    function getDealStateDescription(state: typeof vm.dealState) {\r\n        if (state === 'deal-finalized') {\r\n            return 'Congratulations! Deal is finalized.';\r\n        }\r\n        if (state === 'no-approval') {\r\n            return '';\r\n        }\r\n        if (state === 'approval-perpetual') {\r\n            return 'Approval granted.';\r\n        }\r\n        if (state === 'approval-expired') {\r\n            return 'Approval expired.';\r\n        }\r\n        return `Approval granted. Expires in ${state.approvalExpiresInSeconds} seconds.`;\r\n    }\r\n});","export const delay = (ms = 0) => new Promise((resolve) => setTimeout(resolve, ms));","export function setsMatch<T>(arr1: T[], arr2: T[]) {\r\n    const unionSize = new Set([...arr1, ...arr2]).size;\r\n    return unionSize === arr1.length && unionSize === arr2.length;\r\n}\r\n\r\nexport const getSorterByLatest = <T>(getProp: (item: T) => Date) => (a: T, b: T) => {\r\n    const dateA = getProp(a);\r\n    const dateB = getProp(b);\r\n    return dateB.valueOf() - dateA.valueOf();\r\n}\r\n\r\nexport type PromiseValueType<T> = T extends Promise<infer TValuteType> ? TValuteType : never;\r\n\r\nexport class Lazy<T> {\r\n\r\n    constructor(initialize: () => T) {\r\n        this._initialize = initialize;\r\n    }\r\n\r\n    private _instance: T | undefined;\r\n    private readonly _initialize: () => T;\r\n\r\n    public get val() {\r\n        this._instance = this._instance ?? this._initialize();\r\n        return this._instance;\r\n    }\r\n\r\n}","import { delay } from \"../util/delay\";\r\nimport { Lazy } from \"../util/util\";\r\n\r\n\r\nexport enum InsurancePlanType {\r\n    base, thridParty, assetProtection\r\n}\r\n\r\nexport type InsurancePlan = {\r\n    type: InsurancePlanType,\r\n    description: string,\r\n    rate: number\r\n}\r\n\r\nclass CarInsuranceClient {\r\n    public async getAvaliableInsurancePlans(): Promise<InsurancePlan[]> {\r\n        console.log(`server call getAvaliableInsurancePlans`);\r\n        await delay(1500);\r\n        return [{\r\n            type: InsurancePlanType.base,\r\n            description: 'base plan',\r\n            rate: 0.05\r\n        }, {\r\n            type: InsurancePlanType.thridParty,\r\n            description: '3rd-party liability',\r\n            rate: 0.05\r\n        }, {\r\n            type: InsurancePlanType.assetProtection,\r\n            description: 'asset protection',\r\n            rate: 0.3\r\n        }];\r\n    }\r\n}\r\n\r\nexport const carInsuranceClient = new Lazy(() => new CarInsuranceClient());","import { delay } from \"../util/delay\";\r\nimport { Lazy } from \"../util/util\";\r\n\r\nexport enum Currency {\r\n    USD = 'USD', EUR = 'EUR', GBP = 'GBP', CHF = 'CHF'\r\n}\r\n\r\nexport const rates = {\r\n    [Currency.USD]: 1,\r\n    [Currency.EUR]: 0.93,\r\n    [Currency.GBP]: 0.83,\r\n    [Currency.CHF]: 0.97\r\n}\r\n\r\nclass CurrencyExchangeClient {\r\n\r\n    public async getCurrencies(): Promise<Currency[]> {\r\n\r\n        console.log(`server call getCurrencies`);\r\n\r\n        await delay(1000);\r\n\r\n        return [\r\n            Currency.USD,\r\n            Currency.EUR,\r\n            Currency.GBP,\r\n            Currency.CHF\r\n        ];\r\n    }\r\n\r\n    // in real life app we would probably have \r\n    // centralsed exchange rate cache on client side,\r\n    // for now don't worry about that\r\n    public async getExchangeRate(cur: Currency): Promise<number> {\r\n\r\n        console.log(`server call getExchangeRate`);\r\n\r\n        await delay(1000);\r\n\r\n        return rates[cur];\r\n    }\r\n}\r\n\r\nexport const currencyExchangeClient = new Lazy(() => new CurrencyExchangeClient());","import { delay } from \"../util/delay\";\r\nimport { InsurancePlanType } from \"./CarInsurance.Client\";\r\nimport { CarModel } from \"./CarInventory.Client\";\r\nimport moment from 'moment';\r\nimport { Currency, currencyExchangeClient } from \"./CurrencyExchange.Client\";\r\nimport { Lazy } from \"../util/util\";\r\n\r\nexport type FinancingApproved = {\r\n    isApproved: true,\r\n    approvalToken: string,\r\n    expiration?: Date\r\n}\r\n\r\nexport type FinancingNotApproved = {\r\n    isApproved: false,\r\n    message: string\r\n}\r\n\r\ntype GetApprovalResult = FinancingApproved | FinancingNotApproved;\r\n\r\n\r\nconst approvedFinacings: FinancingApproved[] = [];\r\n\r\nfunction getApprovedFinancing(expiration?: Date) {\r\n\r\n    const res = {\r\n        isApproved: true as const,\r\n        expiration: expiration,\r\n        approvalToken: Math.random().toString()\r\n    };\r\n\r\n    approvedFinacings.push(res);\r\n\r\n    return res\r\n}\r\n\r\nclass FinancingClient {\r\n\r\n    public async getMinimumPossibleDownpayment(\r\n        carModel: CarModel,\r\n        insurancePlans: InsurancePlanType[]): Promise<number> {\r\n\r\n        console.log(`server call getMinimumPossibleDownpayment`);\r\n\r\n        await delay(1000);\r\n\r\n        if (insurancePlans.some(x => x === InsurancePlanType.assetProtection)) {\r\n            return carModel.basePriceUSD / 10;\r\n        }\r\n\r\n        return carModel.basePriceUSD / 5;\r\n    }\r\n\r\n    public async getMinimumPossibleDownpaymentInForeignCurrency(\r\n        carModel: CarModel,\r\n        insurancePlans: InsurancePlanType[],\r\n        currency: Currency): Promise<number> {\r\n\r\n        console.log(`server call getMinimumPossibleDownpaymentInForeignCurrency`);\r\n\r\n        const [minDownpayment, rate] = await Promise.all([\r\n            this.getMinimumPossibleDownpayment(carModel, insurancePlans),\r\n            currencyExchangeClient.val.getExchangeRate(currency)\r\n        ]);\r\n\r\n        return minDownpayment * rate;\r\n    }\r\n\r\n    public async getApproval(\r\n        carModel: CarModel,\r\n        insurancePlans: InsurancePlanType[],\r\n        downpayment: number): Promise<GetApprovalResult> {\r\n\r\n        console.log(`server call getApproval`);\r\n\r\n        await delay(1000);\r\n\r\n        //this would be calculated on the server\r\n\r\n        if (insurancePlans.some(x => x === InsurancePlanType.assetProtection)\r\n            && carModel.basePriceUSD / 10 <= downpayment) {\r\n            return getApprovedFinancing();\r\n        }\r\n\r\n        if (carModel.basePriceUSD / 5 <= downpayment) {\r\n            return getApprovedFinancing(\r\n                moment().add(15 + Math.random() * 30, 's').toDate()\r\n            );\r\n        }\r\n\r\n        return {\r\n            isApproved: false,\r\n            message: \"Approval denied. Downpayment should be over 20% of base price (10% with 'asset protection' insurance).\"\r\n        }\r\n    }\r\n\r\n    public async getApprovalWithForeignCurrency(\r\n        carModel: CarModel,\r\n        insurancePlans: InsurancePlanType[],\r\n        downpayment: number,\r\n        currency: Currency): Promise<GetApprovalResult> {\r\n\r\n        console.log(`server call getApprovalWithForeignCurrency`);\r\n\r\n        const rate = await currencyExchangeClient.val.getExchangeRate(currency);\r\n        const downpaymentInUsd = (downpayment / rate) + 1;\r\n\r\n        return this.getApproval(carModel, insurancePlans, downpaymentInUsd);\r\n    }\r\n\r\n    public async finalizeFinancing(approvalToken: string) {\r\n\r\n        console.log(`server call finalizeFinancing`);\r\n\r\n        await delay(500);\r\n\r\n        return approvedFinacings.some(x =>\r\n            x.approvalToken === approvalToken\r\n            && (!x.expiration || x.expiration >= new Date())\r\n        )\r\n    };\r\n}\r\n\r\nexport const financingClient = new Lazy(() => new FinancingClient());","import { observable, action } from \"mobx\";\r\n\r\nexport const ticker1second = observable({\r\n    lastTickDate: new Date()\r\n});\r\n\r\nsetInterval(action(() => {\r\n    ticker1second.lastTickDate = new Date();\r\n}), 1000);","import { observable, computed, action } from \"mobx\";\r\nimport { CarModel } from \"../../../api/CarInventory.Client\";\r\nimport { InsurancePlanType } from \"../../../api/CarInsurance.Client\";\r\nimport { financingClient } from \"../../../api/Financing.Client\";\r\nimport { setsMatch, getSorterByLatest, PromiseValueType } from \"../../../util/util\";\r\nimport { ticker1second } from \"../../../util/observable-ticker\";\r\n\r\nexport type DealApprovalCacheItem = {\r\n    carModelId: number,\r\n    insurancePlansSelected: InsurancePlanType[],\r\n    downpayment: number,\r\n    timestamp: Date,\r\n    approvalResponse: PromiseValueType<ReturnType<typeof financingClient.val.getApproval>>\r\n}\r\n\r\nexport class CarPurchaseModel {\r\n\r\n    public construtor() {\r\n\r\n    }\r\n\r\n    @observable\r\n    public carModel: CarModel | undefined = undefined;\r\n\r\n    @observable\r\n    public insurancePlansSelected: InsurancePlanType[] = [];\r\n\r\n    @observable\r\n    public downpayment: number = 0;\r\n\r\n    @observable\r\n    public isDealFinalized = false;\r\n\r\n    @observable\r\n    public isLoading = false;\r\n\r\n    @observable\r\n    private _messages: string[] = [];\r\n\r\n    @computed\r\n    public get messages() {\r\n\r\n        const approval = this.financingApprovalResponseForCurrentDeal;\r\n\r\n        return [\r\n            ...this._messages,\r\n            ...(approval?.isApproved === false ? [approval.message] : [])\r\n        ];\r\n    }\r\n\r\n    @computed\r\n    public get financingApprovalResponseForCurrentDeal() {\r\n        return this.fincingApprovalsCache\r\n            .filter(x => this.currentStateMatchesApprovalItem(x))\r\n            .sort(getSorterByLatest(x => x.timestamp))\r\n        [0]?.approvalResponse;\r\n    }\r\n\r\n    protected currentStateMatchesApprovalItem(item: DealApprovalCacheItem): boolean {\r\n\r\n        return this.carModel?.id === item.carModelId\r\n            && this.downpayment === item.downpayment\r\n            && setsMatch(this.insurancePlansSelected, item.insurancePlansSelected);\r\n    }\r\n\r\n    @observable\r\n    protected fincingApprovalsCache: DealApprovalCacheItem[] = [];\r\n\r\n    @computed\r\n    public get canRequestApproval() {\r\n        return this.carModel\r\n            && this.isDealFinalized === false\r\n            && !this.hasValidFinancingApproval;\r\n    }\r\n\r\n    @action\r\n    public async getApproval() {\r\n        this.isLoading = true;\r\n\r\n        try {\r\n            const response = await financingClient.val.getApproval(\r\n                this.carModel!,\r\n                this.insurancePlansSelected,\r\n                this.downpayment);\r\n\r\n            this.fincingApprovalsCache.push({\r\n                carModelId: this.carModel!.id,\r\n                insurancePlansSelected: [...this.insurancePlansSelected],\r\n                downpayment: this.downpayment,\r\n                timestamp: new Date(),\r\n                approvalResponse: response\r\n            });\r\n\r\n        }\r\n        finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    public get canFinalizeDeal() {\r\n        return this.isDealFinalized === false\r\n            && this.hasValidFinancingApproval;\r\n    }\r\n\r\n    @computed\r\n    private get hasValidFinancingApproval() {\r\n        const approval = this.financingApprovalResponseForCurrentDeal;\r\n\r\n        return approval\r\n            && approval.isApproved\r\n            && (!approval.expiration || approval.expiration >= ticker1second.lastTickDate);\r\n    }\r\n\r\n    @action\r\n    public async finalizeDeal() {\r\n        this.isLoading = true;\r\n        this._messages = [];\r\n\r\n        try {\r\n            if (!this.financingApprovalResponseForCurrentDeal?.isApproved) {\r\n                throw new Error('Invalid state.');\r\n            }\r\n            const result = await financingClient.val.finalizeFinancing(\r\n                this.financingApprovalResponseForCurrentDeal.approvalToken\r\n            );\r\n\r\n            if (!result) {\r\n                this._messages.push('Deal finalization failed.');\r\n                return;\r\n            }\r\n\r\n            this.isDealFinalized = true;\r\n        }\r\n        finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n}","import { delay } from \"../util/delay\";\r\nimport { Lazy } from \"../util/util\";\r\n\r\nexport type CarModel = {\r\n    id: number,\r\n    description: string,\r\n    basePriceUSD: number\r\n}\r\n\r\nclass CarInventoryClient {\r\n\r\n    public async getAvaliableCarModels(): Promise<CarModel[]> {\r\n        console.log(`server call getAvaliableCarModels`);\r\n        await delay(500);\r\n        return [\r\n            {\r\n                id: 1,\r\n                description: 'Hetman Speedster',\r\n                basePriceUSD: 100000\r\n            },\r\n            {\r\n                id: 2,\r\n                description: 'Hetman Workhorse',\r\n                basePriceUSD: 26000\r\n            },\r\n            {\r\n                id: 3,\r\n                description: 'Hetman Luxury',\r\n                basePriceUSD: 90000\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n\r\nexport const carInvenotryClient = new Lazy(() => new CarInventoryClient());","import { observable, action, computed } from \"mobx\";\r\nimport { CarPurchaseModel } from \"../../model/CarPurchase.Model\";\r\nimport { CarModel, carInvenotryClient } from \"../../../../api/CarInventory.Client\";\r\n\r\nexport class CarModelsSelectorVM {\r\n\r\n    public constructor(carPurchaseModel: CarPurchaseModel) {\r\n        this.carPurchaseModel = carPurchaseModel;\r\n        this.reloadAvailableModels();\r\n    }\r\n\r\n    private readonly carPurchaseModel: CarPurchaseModel;\r\n\r\n    @observable\r\n    public availableModels: CarModel[] = [];\r\n\r\n    @observable\r\n    public isLoading: boolean = false;\r\n\r\n    @action.bound\r\n    public async reloadAvailableModels() {\r\n        this.isLoading = true;\r\n        try {\r\n            this.availableModels = await carInvenotryClient.val.getAvaliableCarModels();\r\n        }\r\n        finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    public get isDealFinilized() {\r\n        return this.carPurchaseModel.isDealFinalized;\r\n    }\r\n\r\n    @computed\r\n    public get selectedModel() {\r\n        return this.carPurchaseModel.carModel;\r\n    }\r\n\r\n    @action.bound\r\n    public async setSelectedModel(carModel: CarModel | undefined) {\r\n        this.carPurchaseModel.carModel = carModel;\r\n    }\r\n}","import { observable, action, computed } from \"mobx\";\r\nimport { CarPurchaseModel } from \"../../model/CarPurchase.Model\";\r\nimport { InsurancePlan, carInsuranceClient } from \"../../../../api/CarInsurance.Client\";\r\n\r\nexport class InsurancePlansSelectorVM {\r\n\r\n    public constructor(carPurchaseModel: CarPurchaseModel) {\r\n        this.carPurchaseModel = carPurchaseModel;\r\n        this.reloadAvailablePlans();\r\n    }\r\n\r\n    private readonly carPurchaseModel: CarPurchaseModel;\r\n\r\n    @observable\r\n    public availablePlans: InsurancePlan[] = [];\r\n\r\n    @observable\r\n    public isLoading: boolean = false;\r\n\r\n    @action.bound\r\n    public async reloadAvailablePlans() {\r\n        this.isLoading = true;\r\n        try {\r\n            this.availablePlans = await carInsuranceClient.val.getAvaliableInsurancePlans();\r\n        }\r\n        finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    public get isDealFinilized() {\r\n        return this.carPurchaseModel.isDealFinalized;\r\n    }\r\n\r\n    @computed\r\n    public get selectedPlans() {\r\n        return this.availablePlans\r\n            .filter(x =>\r\n                this.carPurchaseModel.insurancePlansSelected.some(y => y === x.type));\r\n    }\r\n\r\n    @action.bound\r\n    public async setSelectedPlans(newSelectedPlans: InsurancePlan[]) {\r\n\r\n        const selectedPlanTypes = newSelectedPlans.map(x => x.type);\r\n        this.carPurchaseModel.insurancePlansSelected = selectedPlanTypes;\r\n    }\r\n}","import { observable, computed, action, reaction } from \"mobx\";\r\n\r\nexport interface NumericInputVM {\r\n    readonly displayedValue: string | undefined,\r\n    onChange: (val: string | undefined) => void,\r\n    onBlur: (val: string | undefined) => void,\r\n    readonly message?: string,\r\n    readonly isValid: boolean,\r\n    readonly disabled?: boolean\r\n}\r\n\r\nexport class PositiveIntegerVM implements NumericInputVM {\r\n\r\n    public constructor(\r\n        getModelValue: () => number | undefined,\r\n        setValidValueToModel: (val: number | undefined) => void,\r\n        isDisabled?: () => boolean,\r\n        additionalValidity?: () => {\r\n            isValid: boolean,\r\n            message?: string\r\n        }) {\r\n\r\n        this.getModelValue = getModelValue;\r\n        this.setValidValueToModel = setValidValueToModel;\r\n        this.isDisabled = isDisabled ?? (() => false);\r\n        this.additionalValidity = additionalValidity\r\n            ?? (() => ({\r\n                isValid: true\r\n            }));\r\n\r\n        // any change in model overrides unsaved input value\r\n        // to prevent model state being overwritten without user \r\n        // first noticing it changed\r\n        reaction(\r\n            () => this.getModelValue(),\r\n            () => this.clearUnsavedState());\r\n    }\r\n\r\n    private readonly getModelValue: () => number | undefined;\r\n    private readonly setValidValueToModel: (val: number | undefined) => void;\r\n    private readonly isDisabled: () => boolean;\r\n    private readonly additionalValidity: () => {\r\n        isValid: boolean,\r\n        message?: string\r\n    };\r\n\r\n    @computed\r\n    public get displayedValue() {\r\n        return this.currentUnsavedValue\r\n            ?? this.getModelValue()?.toString()\r\n    }\r\n\r\n    @observable\r\n    public currentUnsavedValue: string | undefined;\r\n\r\n    @computed\r\n    public get disabled() {\r\n        return this.isDisabled();\r\n    }\r\n\r\n    @observable\r\n    public _message: string | undefined;\r\n    @computed\r\n    public get message() {\r\n        return this._message ?? this.additionalValidity().message;\r\n    }\r\n\r\n    @observable\r\n    private _isValid: boolean = true;\r\n\r\n    @computed\r\n    public get isValid() {\r\n        return this._isValid && this.additionalValidity().isValid;\r\n    }\r\n\r\n    @action.bound\r\n    public onChange(val: string | undefined) {\r\n        this.currentUnsavedValue = val;\r\n    }\r\n\r\n    @action.bound\r\n    public clearUnsavedState() {\r\n        this.currentUnsavedValue = undefined;\r\n        this._message = undefined;\r\n        this._isValid = true;\r\n    }\r\n\r\n    @action.bound\r\n    public onBlur(val: string | undefined) {\r\n        this.clearUnsavedState();\r\n\r\n        if (val === undefined) {\r\n            this.setValidValueToModel(val);\r\n            return;\r\n        }\r\n\r\n        val = val.trim()\r\n            .replace('k', '000')\r\n            .replace('K', '000')\r\n            .replace('m', '000000')\r\n            .replace('M', '000000');\r\n\r\n        if (val[0] === '-') {\r\n            this._isValid = false;\r\n            this._message = 'Value must be 0 or positive';\r\n            this.currentUnsavedValue = val;\r\n            return;\r\n        }\r\n\r\n        const isInteger = /^\\d+$/.test(val) === true;\r\n        if (!isInteger) {\r\n            this._isValid = false;\r\n            this._message = 'Please enter a valid integer';\r\n            this.currentUnsavedValue = val;\r\n            return;\r\n        }\r\n\r\n        const int = parseInt(val);\r\n        this.setValidValueToModel(int);\r\n    }\r\n}","import { computed, action, observable, runInAction } from \"mobx\";\r\nimport { CarPurchaseModel } from \"../model/CarPurchase.Model\";\r\nimport { CarModelsSelectorVM } from \"./car-model-selector/CarModelsSelector.VM\";\r\nimport { InsurancePlansSelectorVM } from \"./insurance-plan-selector/InsurancePlansSelector.VM\";\r\nimport { ticker1second } from \"../../../util/observable-ticker\";\r\nimport moment from \"moment\";\r\nimport { PositiveIntegerVM } from \"../../../generic-components/numeric-input/NumericInputVM\";\r\nimport { financingClient } from \"../../../api/Financing.Client\";\r\n\r\nexport class CarPurchaseVM {\r\n\r\n    constructor(id: string, onClose?: (_this: CarPurchaseVM) => void) {\r\n        this.id = id;\r\n        this.onClose = onClose;\r\n\r\n        this.carPurchaseModel = this.createModel();\r\n\r\n        this.carModelSelectorVM = new CarModelsSelectorVM(this.carPurchaseModel);\r\n        this.insurancePlanSelectorVM = new InsurancePlansSelectorVM(this.carPurchaseModel);\r\n\r\n        this.downpaymentInputVm = this.createDownpaymentVM();\r\n    }\r\n\r\n    protected createModel(): CarPurchaseModel {\r\n        return new CarPurchaseModel();\r\n    }\r\n\r\n    public readonly cssClassName = 'car-purchase-deal' as const;\r\n\r\n    public readonly id: string;\r\n    private readonly onClose?: (_this: CarPurchaseVM) => void;\r\n\r\n    public readonly carPurchaseModel: CarPurchaseModel;\r\n    public readonly carModelSelectorVM: CarModelsSelectorVM;\r\n    public readonly insurancePlanSelectorVM: InsurancePlansSelectorVM;\r\n\r\n    @observable\r\n    protected _isLoading: boolean = false;\r\n\r\n    @computed\r\n    public get messages() {\r\n        return [\r\n            ...this.carPurchaseModel.messages\r\n        ];\r\n    }\r\n\r\n    @computed\r\n    public get isLoading() {\r\n        return this._isLoading\r\n            || this.insurancePlanSelectorVM.isLoading\r\n            || this.carModelSelectorVM.isLoading\r\n            || this.carPurchaseModel.isLoading;\r\n    }\r\n\r\n    @computed\r\n    public get tabHeader() {\r\n        if (!this.carPurchaseModel.carModel) {\r\n            return `${this.id}`;\r\n        }\r\n\r\n        let state: string = '';\r\n        if (this.dealState === 'deal-finalized') {\r\n            state = 'done';\r\n        } else if (this.dealState === 'approval-perpetual') {\r\n            state = 'approved'\r\n        } else if (typeof this.dealState !== 'string') {\r\n            state = `${this.dealState.approvalExpiresInSeconds} sec`;\r\n        }\r\n\r\n        return `${this.carPurchaseModel.carModel.description} ${this.headerAdditionalDescription()} ${state}`;\r\n    }\r\n\r\n    protected headerAdditionalDescription() {\r\n        return '';\r\n    }\r\n\r\n    @computed\r\n    public get finalPrice() {\r\n        const basePrice = this.carPurchaseModel.carModel?.basePriceUSD;\r\n\r\n        if (basePrice === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return this.calculateFinalPriceFromBase(basePrice);\r\n    }\r\n\r\n    protected calculateFinalPriceFromBase(basePrice: number): number | undefined {\r\n\r\n        const priceIncrease = this.insurancePlanSelectorVM\r\n            .selectedPlans\r\n            .map(x => basePrice * x.rate)\r\n            .reduce((prev, cur) => prev + cur, 0);\r\n\r\n        return basePrice + priceIncrease;\r\n    }\r\n\r\n    @computed\r\n    public get dealState() {\r\n\r\n        if (this.carPurchaseModel.isDealFinalized) {\r\n            return 'deal-finalized' as const;\r\n        }\r\n\r\n        const approval = this.carPurchaseModel.financingApprovalResponseForCurrentDeal;\r\n\r\n        if (!approval || approval.isApproved === false) {\r\n            return 'no-approval' as const;\r\n        }\r\n\r\n        const expiration = approval.expiration;\r\n        if (!expiration) {\r\n            return 'approval-perpetual' as const;\r\n        }\r\n\r\n        var duration = moment.duration(moment(expiration).diff(ticker1second.lastTickDate));\r\n        var seconds = Math.round(duration.asSeconds());\r\n\r\n        if (seconds <= 0) {\r\n            return 'approval-expired' as const;\r\n        }\r\n\r\n        return { approvalExpiresInSeconds: seconds } as const;\r\n    }\r\n\r\n    public readonly downpaymentInputVm: PositiveIntegerVM;\r\n    private createDownpaymentVM() {\r\n        return new PositiveIntegerVM(\r\n            () => this.carPurchaseModel.downpayment,\r\n            (val) => this.carPurchaseModel.downpayment = (val ?? 0),\r\n            () => this.isDealFinilized,\r\n            () => {\r\n                if (this.finalPrice\r\n                    && this.carPurchaseModel.downpayment > this.finalPrice) {\r\n                    return {\r\n                        isValid: false,\r\n                        message: 'Downpayment exceeds final price'\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    isValid: true\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    @computed\r\n    public get isValid() {\r\n        return !this.isLoading\r\n            && this.downpaymentInputVm.isValid;\r\n    }\r\n\r\n    @computed\r\n    public get canRequestApproval() {\r\n        return this.carPurchaseModel.canRequestApproval\r\n            && !this.isLoading\r\n            && this.isValid;\r\n    }\r\n\r\n    @action.bound\r\n    public async getApproval() {\r\n        await this.carPurchaseModel.getApproval();\r\n    }\r\n\r\n    @computed\r\n    public get isDealFinilized() {\r\n        return this.carPurchaseModel.isDealFinalized;\r\n    }\r\n\r\n    @computed\r\n    public get canFinalizeDeal() {\r\n        return this.carPurchaseModel.canFinalizeDeal\r\n            && !this.isLoading\r\n            && this.isValid;\r\n    }\r\n\r\n    @action.bound\r\n    public async finalzieDeal() {\r\n        await this.carPurchaseModel.finalizeDeal();\r\n    }\r\n\r\n    @computed\r\n    public get canSetMinimumPossibleDownpayment() {\r\n        return this.carPurchaseModel.carModel !== undefined\r\n            && !this.isDealFinilized\r\n            && !this.isLoading;\r\n    }\r\n\r\n    @action.bound\r\n    public async setMinimumPossibleDownpayment() {\r\n        this._isLoading = true;\r\n        try {\r\n            const minimumDownpayment = await this.getMinimumPossibleDownpaymentFromServer();\r\n\r\n            runInAction(() => {\r\n                if (this.carPurchaseModel.downpayment !== minimumDownpayment) {\r\n                    this.carPurchaseModel.downpayment = minimumDownpayment;\r\n                } else {\r\n                    this.downpaymentInputVm.clearUnsavedState();\r\n                }\r\n            });\r\n\r\n        } finally {\r\n            this._isLoading = false;\r\n        }\r\n    }\r\n\r\n    protected async getMinimumPossibleDownpaymentFromServer() {\r\n        return financingClient.val.getMinimumPossibleDownpayment(\r\n            this.carPurchaseModel.carModel!,\r\n            this.carPurchaseModel.insurancePlansSelected\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    public close() {\r\n        // clean deal, probably by notifying backend\r\n        this.onClose?.(this);\r\n    }\r\n}","import { CarPurchaseModel, DealApprovalCacheItem } from \"./CarPurchase.Model\";\r\nimport { observable, action } from \"mobx\";\r\nimport { Currency } from \"../../../api/CurrencyExchange.Client\";\r\nimport { financingClient } from \"../../../api/Financing.Client\";\r\n\r\ntype DealWithForeignCurrencyApprovalCacheItem =\r\n    DealApprovalCacheItem & {\r\n        downpaymentCurrency: Currency;\r\n    }\r\n\r\n\r\nexport class CarPurchaseWithForeignCurrencyModel extends CarPurchaseModel {\r\n\r\n    @observable\r\n    public downpaymentCurrency: Currency = Currency.USD;\r\n\r\n    @observable\r\n    protected fincingApprovalsCache: DealWithForeignCurrencyApprovalCacheItem[] = [];\r\n\r\n    protected currentStateMatchesApprovalItem(item: DealWithForeignCurrencyApprovalCacheItem): boolean {\r\n        return super.currentStateMatchesApprovalItem(item)\r\n            && this.downpaymentCurrency === item.downpaymentCurrency;\r\n    }\r\n\r\n    @action\r\n    public async getApproval() {\r\n        this.isLoading = true;\r\n\r\n        try {\r\n            const response = await financingClient.val.getApprovalWithForeignCurrency(\r\n                this.carModel!,\r\n                this.insurancePlansSelected,\r\n                this.downpayment,\r\n                this.downpaymentCurrency);\r\n\r\n            this.fincingApprovalsCache.push({\r\n                carModelId: this.carModel!.id,\r\n                insurancePlansSelected: [...this.insurancePlansSelected],\r\n                downpayment: this.downpayment,\r\n                timestamp: new Date(),\r\n                approvalResponse: response,\r\n                downpaymentCurrency: this.downpaymentCurrency\r\n            });\r\n\r\n        }\r\n        finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n}","import { Currency, currencyExchangeClient } from \"../../api/CurrencyExchange.Client\";\r\nimport { observable, action, computed } from \"mobx\";\r\n\r\n// a bit naive, in real world we would probably have a few retries built in.\r\nconst availableCurrencies = currencyExchangeClient.val.getCurrencies();\r\n\r\nexport class CurrencySelectorVM {\r\n    public constructor(\r\n        getModelValue: () => Currency,\r\n        setValueToModel: (val: Currency) => void,\r\n        isDisabled?: () => boolean) {\r\n\r\n        this.getModelValue = getModelValue;\r\n        this.setValueToModel = setValueToModel;\r\n        this.isDisabled = isDisabled ?? (() => false);\r\n\r\n        this.isLoading = true;\r\n        availableCurrencies.then(action((currencies) => {\r\n            this.availableCurrencies = currencies;\r\n            this.isLoading = false;\r\n        }));\r\n    }\r\n\r\n    private readonly getModelValue: () => Currency;\r\n    private readonly setValueToModel: (val: Currency) => void;\r\n    private readonly isDisabled: () => boolean;\r\n\r\n    @observable\r\n    public availableCurrencies: Currency[] = [];\r\n\r\n    @observable\r\n    public isLoading: boolean = false;\r\n\r\n    @computed\r\n    public get selectedCurrency() {\r\n        return this.getModelValue();\r\n    }\r\n\r\n    @computed\r\n    public get disabled() {\r\n        return this.isLoading || this.isDisabled();\r\n    }\r\n\r\n    @action.bound\r\n    public onChange(val: Currency) {\r\n        this.setValueToModel(val);\r\n    }\r\n}","import { CarPurchaseVM } from \"./CarPurchase.VM\";\r\nimport { CarPurchaseWithForeignCurrencyModel } from \"../model/CarPurchaseWithForeignCurrency.Model\";\r\nimport { CurrencySelectorVM } from \"../../../generic-components/currency-selector/CurrencySelector.VM\";\r\nimport { Currency, currencyExchangeClient } from \"../../../api/CurrencyExchange.Client\";\r\nimport { financingClient } from \"../../../api/Financing.Client\";\r\nimport { observable, reaction, action } from \"mobx\";\r\n\r\nexport class CarPurchaseWithForeignCurrencyVM extends CarPurchaseVM {\r\n\r\n  constructor(id: string, onClose?: (_this: CarPurchaseVM) => void) {\r\n    super(id, onClose);\r\n\r\n    reaction(\r\n      () => this.carPurchaseModel.downpaymentCurrency,\r\n      (_currency) => this.reloadExchangeRate(),\r\n      { fireImmediately: true }\r\n    );\r\n  }\r\n\r\n  public readonly carPurchaseModel: CarPurchaseWithForeignCurrencyModel = this.carPurchaseModel;\r\n\r\n  protected createModel(): CarPurchaseWithForeignCurrencyModel {\r\n    return new CarPurchaseWithForeignCurrencyModel();\r\n  }\r\n\r\n  protected headerAdditionalDescription() {\r\n    return ` ${this.carPurchaseModel.downpaymentCurrency} `;\r\n  }\r\n\r\n  public readonly currencySelector = new CurrencySelectorVM(\r\n    () => this.carPurchaseModel.downpaymentCurrency,\r\n    (newCurrency) => this.carPurchaseModel.downpaymentCurrency = newCurrency,\r\n    () => this.isDealFinilized\r\n  );\r\n\r\n  @observable\r\n  private exchangeRate: number | undefined;\r\n\r\n  @action.bound\r\n  private async reloadExchangeRate() {\r\n    this._isLoading = true;\r\n    this.exchangeRate = undefined;\r\n    try {\r\n      this.exchangeRate = await currencyExchangeClient.val.getExchangeRate(\r\n        this.carPurchaseModel.downpaymentCurrency\r\n      );\r\n\r\n    } finally {\r\n      this._isLoading = false;\r\n    }\r\n  }\r\n\r\n  public foreignCuurencyHandlingCoeficient = 1.02 as const;\r\n  protected calculateFinalPriceFromBase(basePrice: number) {\r\n\r\n    if (this.exchangeRate === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const convertedBasePrice = basePrice * this.exchangeRate;\r\n\r\n    let price = super.calculateFinalPriceFromBase(convertedBasePrice);\r\n\r\n    if (!price) {\r\n      return undefined;\r\n    }\r\n\r\n    if (this.carPurchaseModel.downpaymentCurrency !== Currency.USD) {\r\n      price = price * this.foreignCuurencyHandlingCoeficient;\r\n    }\r\n\r\n    return Math.round(price);\r\n  }\r\n\r\n  protected async getMinimumPossibleDownpaymentFromServer() {\r\n    return financingClient.val.getMinimumPossibleDownpaymentInForeignCurrency(\r\n      this.carPurchaseModel.carModel!,\r\n      this.carPurchaseModel.insurancePlansSelected,\r\n      this.carPurchaseModel.downpaymentCurrency\r\n    );\r\n  }\r\n}\r\n","import { CarPurchaseVM } from './screens/car-purchase/components/CarPurchase.VM';\r\nimport { observable, action } from 'mobx';\r\nimport { CarPurchaseWithForeignCurrencyVM } from './screens/car-purchase/components/CarPurchaseWithForeignCurrency.VM';\r\n\r\n\r\ntype CarDealVM = CarPurchaseVM | CarPurchaseWithForeignCurrencyVM;\r\n\r\nclass AppVM {\r\n\r\n    public constructor() {\r\n        this.addNewDeal();\r\n    }\r\n\r\n    private coutner = 0;\r\n\r\n    @observable\r\n    public readonly capPurchaseVMs: CarDealVM[] = [];\r\n\r\n    @observable\r\n    public activeCapPurchaseVM: CarDealVM | undefined;\r\n\r\n    @action.bound\r\n    public addNewDeal() {\r\n        this.coutner += 1;\r\n        const vm = new CarPurchaseVM(`Deal ${this.coutner}`, this.closeDeal);\r\n        this.capPurchaseVMs.push(vm);\r\n        this.activeCapPurchaseVM = vm;\r\n    }\r\n\r\n    @action.bound\r\n    public addForeignCurrencyDeal() {\r\n        this.coutner += 1;\r\n        const vm = new CarPurchaseWithForeignCurrencyVM(`Deal ${this.coutner}`, this.closeDeal);\r\n        this.capPurchaseVMs.push(vm);\r\n        this.activeCapPurchaseVM = vm;\r\n    }\r\n\r\n    @action.bound\r\n    public setActiveDeal(deal: CarPurchaseVM) {\r\n        this.activeCapPurchaseVM = deal;\r\n    }\r\n\r\n    @action.bound\r\n    private closeDeal(dealVm: CarPurchaseVM) {\r\n        const index = this.capPurchaseVMs.findIndex((x) => x === dealVm);\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        if (this.activeCapPurchaseVM === this.capPurchaseVMs[index]) {\r\n            this.activeCapPurchaseVM =\r\n                this.capPurchaseVMs[index - 1]\r\n                ?? this.capPurchaseVMs[index + 1];\r\n        }\r\n\r\n        this.capPurchaseVMs.splice(index, 1);\r\n    }\r\n\r\n}\r\n\r\nexport const appVm = new AppVM();","import { observer } from \"mobx-react\";\r\nimport React from \"react\";\r\nimport { CurrencySelectorVM } from \"./CurrencySelector.VM\";\r\nimport { SelectDropdown } from \"../select-dropdown/SelectDropdown\";\r\n\r\ntype CurrencySelectorProps =\r\n    {\r\n        selectAttributes?: React.HTMLAttributes<HTMLElement>,\r\n        vm: CurrencySelectorVM\r\n    };\r\n\r\nexport const CurrencySelector =\r\n    observer((props: CurrencySelectorProps) => {\r\n\r\n        const vm = props.vm;\r\n\r\n        return <>\r\n            <SelectDropdown\r\n                selectAttributes={props.selectAttributes}\r\n                emptyPlaceholder=''\r\n                vm={{\r\n                    availableItems: vm.availableCurrencies,\r\n                    selectedItem: vm.selectedCurrency,\r\n                    hasEmptyOption: false,\r\n                    getKeyValue: (item) => item,\r\n                    getDescription: (item) => item,\r\n\r\n                    handleSelect: (item) => vm.onChange(item),\r\n                    disabled: vm.disabled\r\n                }}\r\n            />\r\n        </>\r\n    });","import { CarPurchaseWithForeignCurrencyVM } from \"./CarPurchaseWithForeignCurrency.VM\";\r\nimport { observer } from \"mobx-react\";\r\nimport React from \"react\";\r\nimport { CarPurchaseBare } from \"./CarPurchase\";\r\nimport { CurrencySelector } from \"../../../generic-components/currency-selector/CurrencySelector\";\r\nimport './CarPurchase.css';\r\nimport './CarPurchaseWithForeignCurrency.css';\r\n\r\nexport const CarPurchaseWithForeignCurrency: React.FunctionComponent<{\r\n    vm: CarPurchaseWithForeignCurrencyVM\r\n}> = observer(({ vm }) => (\r\n    <div className='car-purchase-deal car-purchase-deal-with-foreign-currency'>\r\n        <CarPurchaseBare vm={vm} />\r\n\r\n        <div className='car-purchase-downpayment-currency-label'>\r\n            Please select currency\r\n    </div>\r\n        <CurrencySelector\r\n            selectAttributes={{ className: 'car-purchase-downpayment-currency' }}\r\n            vm={vm.currencySelector}\r\n        />\r\n\r\n    </div>));","import React from 'react';\r\nimport { observer, Observer } from 'mobx-react';\r\n\r\nimport { CarPurchase } from './screens/car-purchase/components/CarPurchase';\r\nimport { appVm } from './App.VM';\r\n\r\nimport './App.css';\r\nimport { CarPurchaseWithForeignCurrencyVM } from \"./screens/car-purchase/components/CarPurchaseWithForeignCurrency.VM\";\r\nimport { CarPurchaseVM } from \"./screens/car-purchase/components/CarPurchase.VM\";\r\nimport { CarPurchaseWithForeignCurrency } from \"./screens/car-purchase/components/CarPurchaseWithForeignCurrency\";\r\n\r\nexport const App = observer(() => {\r\n  return <div id='app-root'>\r\n\r\n    <div className='main-logo'>\r\n      Welcome to Hetman Motors (Mobx)\r\n    </div>\r\n\r\n    <div className='screens'>\r\n      <div className='tabs'>\r\n        <button\r\n          className='button-add-new-deal'\r\n          onClick={appVm.addNewDeal}\r\n        >\r\n          Add deal\r\n        </button>\r\n\r\n        <button\r\n          className=\"button-add-new-deal\"\r\n          onClick={appVm.addForeignCurrencyDeal}\r\n        >\r\n          Add foreign currency deal\r\n        </button>\r\n\r\n        {\r\n          appVm.capPurchaseVMs.map(x => (\r\n            <div\r\n              className={`deal-tab-header ${x === appVm.activeCapPurchaseVM ? 'active' : ''}`}\r\n              key={x.id}\r\n            >\r\n              <Observer>\r\n                {() => {\r\n                  console.log(`rendering header for ${x.id}`);\r\n                  return (<>\r\n                    <div\r\n                      className='header-text'\r\n                      onClick={() => appVm.setActiveDeal(x)}\r\n                    >\r\n                      {x.tabHeader}\r\n                    </div>\r\n                  </>);\r\n                }}\r\n              </Observer>\r\n              <button\r\n                className='close-button'\r\n                onClick={x.close}\r\n              >\r\n                X\r\n                </button>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n\r\n      <div className={`active-tab`}>\r\n        {\r\n          appVm.activeCapPurchaseVM &&\r\n          renderActiveDeal(appVm.activeCapPurchaseVM)\r\n        }\r\n      </div>\r\n    </div>\r\n  </div>;\r\n\r\n  function renderActiveDeal(vm: CarPurchaseVM | CarPurchaseWithForeignCurrencyVM) {\r\n    if (vm instanceof CarPurchaseWithForeignCurrencyVM) {\r\n      return <CarPurchaseWithForeignCurrency vm={vm} />;\r\n    }\r\n\r\n    if (vm instanceof CarPurchaseVM) {\r\n      return <CarPurchase vm={vm} />;\r\n    }\r\n  }\r\n\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}